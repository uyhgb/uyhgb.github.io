<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python的类、对象、函数、方法、模块、库的辨析</title>
    <link href="/2025/05/11/Python%E7%9A%84%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%BA%93%E7%9A%84%E8%BE%A8%E6%9E%90/"/>
    <url>/2025/05/11/Python%E7%9A%84%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%BA%93%E7%9A%84%E8%BE%A8%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>问题背景：由于煮波代码基础贼差，而且记性不好，经常会问GPT一些很基础的概念问题，扔在这里方便煮波随时复习，对话的起因是在问ROS里面的<code>rospy.get_param()</code>函数</p><hr><h1 id="函数，方法"><a href="#函数，方法" class="headerlink" title="函数，方法"></a>函数，方法</h1><h2 id="Q："><a href="#Q：" class="headerlink" title="Q："></a>Q：</h2><p>getparam是rospy下的方法还是函数呢，我不太了解python的方法、函数等概念，能为我解释一下吗</p><h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>太好了，这是一个很关键又常让人疑惑的问题！我来从<strong>Python 的角度</strong>一步步讲清楚“函数”、“方法”这些概念，再解释 <code>rospy.get_param()</code> 是哪一种。</p><hr><h2 id="🧠-一、函数（Function）是什么？"><a href="#🧠-一、函数（Function）是什么？" class="headerlink" title="🧠 一、函数（Function）是什么？"></a>🧠 一、函数（Function）是什么？</h2><blockquote><p><strong>函数</strong>是 Python 中可以被单独调用的一段可复用代码。</p></blockquote><p>你可以把它理解为一个“独立的工具”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello,&quot;</span>, name)<br><br>say_hello(<span class="hljs-string">&quot;Andy&quot;</span>)  <span class="hljs-comment"># 调用函数</span><br></code></pre></td></tr></table></figure><p>这里的 <code>say_hello</code> 就是一个函数，它不属于任何“对象”或者“类”。</p><hr><h2 id="🔧-二、方法（Method）又是什么？"><a href="#🔧-二、方法（Method）又是什么？" class="headerlink" title="🔧 二、方法（Method）又是什么？"></a>🔧 二、方法（Method）又是什么？</h2><blockquote><p><strong>方法</strong>就是“类中的函数”，它必须依附于一个“对象”来使用。</p></blockquote><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Woof!&quot;</span>)<br><br>d = Dog()      <span class="hljs-comment"># 创建一个对象</span><br>d.bark()       <span class="hljs-comment"># 这是“方法”的调用，依赖于对象 d</span><br></code></pre></td></tr></table></figure><p>这里的 <code>bark</code> 就是 Dog 这个类的一个 <strong>方法</strong>。</p><hr><h2 id="🧩-那-rospy-get-param-是函数还是方法？"><a href="#🧩-那-rospy-get-param-是函数还是方法？" class="headerlink" title="🧩 那 rospy.get_param() 是函数还是方法？"></a>🧩 那 <code>rospy.get_param()</code> 是函数还是方法？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">rospy.get_param(<span class="hljs-string">&quot;~param_name&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个是<strong>函数（function）</strong>，虽然它写作 <code>rospy.get_param()</code>，但它并<strong>不是某个对象的方法</strong>，而是一个定义在 <code>rospy</code> 模块里的独立函数。</p><h3 id="✅-解释："><a href="#✅-解释：" class="headerlink" title="✅ 解释："></a>✅ 解释：</h3><ul><li><code>rospy</code> 是一个模块（Python 的库）</li><li><code>get_param</code> 是这个模块下定义的一个函数</li><li>所以它的全称是：<strong>rospy 模块里的函数 get_param</strong></li></ul><p>就像你用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">math.sqrt(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>这也是 math 模块下的 sqrt 函数，本质是一样的。</p><hr><h2 id="🔁-小结：函数-vs-方法"><a href="#🔁-小结：函数-vs-方法" class="headerlink" title="🔁 小结：函数 vs 方法"></a>🔁 小结：函数 vs 方法</h2><table><thead><tr><th>比较项</th><th>函数（function）</th><th>方法（method）</th></tr></thead><tbody><tr><td>所在位置</td><td>模块（如 <code>rospy</code>、<code>math</code>）</td><td>类（如 <code>Dog.bark()</code>）</td></tr><tr><td>是否属于对象</td><td>否</td><td>是（必须通过对象或类调用）</td></tr><tr><td>示例</td><td><code>rospy.get_param()</code></td><td><code>list.append()</code>、<code>str.upper()</code></td></tr></tbody></table><hr><h2 id="🧪-再举个例子："><a href="#🧪-再举个例子：" class="headerlink" title="🧪 再举个例子："></a>🧪 再举个例子：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;hello&quot;</span>)         <span class="hljs-comment"># 函数：内置函数 len</span><br><span class="hljs-string">&quot;hello&quot;</span>.upper()      <span class="hljs-comment"># 方法：字符串对象的 upper 方法</span><br></code></pre></td></tr></table></figure><hr><p>如果你之后还想进一步理解<strong>类、对象、模块、库、包之间的区别</strong>，我也可以为你做一个图文对比的解释！需要吗？</p><h1 id="Python-中的“类、对象、模块、库、包”之间的区别"><a href="#Python-中的“类、对象、模块、库、包”之间的区别" class="headerlink" title="Python 中的“类、对象、模块、库、包”之间的区别"></a>Python 中的“类、对象、模块、库、包”之间的区别</h1><p>太好了！理解 Python 中的“类、对象、模块、库、包”之间的区别，会让你写代码时更清晰、心里更有谱。我会用简单、类比清晰的方式来讲解：</p><hr><h2 id="🧱-一张总览表格：快速区分这些概念"><a href="#🧱-一张总览表格：快速区分这些概念" class="headerlink" title="🧱 一张总览表格：快速区分这些概念"></a>🧱 一张总览表格：快速区分这些概念</h2><table><thead><tr><th>概念</th><th>类比</th><th>是什么？</th><th>例子</th></tr></thead><tbody><tr><td><strong>函数</strong></td><td>工具</td><td>可单独调用的一段代码</td><td><code>print()</code>, <code>math.sqrt()</code></td></tr><tr><td><strong>方法</strong></td><td>对象的功能按钮</td><td>类里的函数</td><td><code>&quot;abc&quot;.upper()</code>, <code>list.append()</code></td></tr><tr><td><strong>类（Class）</strong></td><td>模板</td><td>创建对象的蓝图</td><td><code>class Dog: ...</code></td></tr><tr><td><strong>对象（Object）</strong></td><td>实物</td><td>类的具体实例</td><td><code>dog1 = Dog()</code></td></tr><tr><td><strong>模块（Module）</strong></td><td>文件</td><td>含有函数、类的 <code>.py</code> 文件</td><td><code>rospy</code>, <code>math</code></td></tr><tr><td><strong>包（Package）</strong></td><td>文件夹</td><td>带有 <code>__init__.py</code> 的模块集合</td><td><code>rospy</code>, <code>numpy</code></td></tr><tr><td><strong>库（Library）</strong></td><td>工具箱</td><td>一组功能相关模块&#x2F;包的集合</td><td><code>OpenCV</code>, <code>NumPy</code>, <code>pypylon</code></td></tr></tbody></table><hr><h2 id="🔍-二、一个例子贯穿说明"><a href="#🔍-二、一个例子贯穿说明" class="headerlink" title="🔍 二、一个例子贯穿说明"></a>🔍 二、一个例子贯穿说明</h2><p>我们从一个“狗”的概念来举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mymodule.py （这是一个模块）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:  <span class="hljs-comment"># 这是一个类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):  <span class="hljs-comment"># 这是一个方法</span><br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 这是一个方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name, <span class="hljs-string">&quot;says woof!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():  <span class="hljs-comment"># 这是一个函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello from mymodule!&quot;</span>)<br></code></pre></td></tr></table></figure><p>你可以这样使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mymodule  <span class="hljs-comment"># 导入模块（也是一个包的一部分）</span><br><br>mymodule.say_hello()     <span class="hljs-comment"># 调用模块里的函数</span><br><br>dog1 = mymodule.Dog(<span class="hljs-string">&quot;Buddy&quot;</span>)  <span class="hljs-comment"># 创建对象（类的实例）</span><br>dog1.bark()             <span class="hljs-comment"># 调用对象的方法</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧩-模块、包、库之间的关系图解"><a href="#🧩-模块、包、库之间的关系图解" class="headerlink" title="🧩 模块、包、库之间的关系图解"></a>🧩 模块、包、库之间的关系图解</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">MyLibrary/        &lt;-- 库（Library）<br>│<br>├── image/        &lt;-- 包（Package）<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   ├── <span class="hljs-keyword">resize</span>.<span class="hljs-keyword">py</span>     &lt;-- 模块<br>│   └── color.<span class="hljs-keyword">py</span>      &lt;-- 模块<br>│<br>├── utils/<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   └── logging.<span class="hljs-keyword">py</span>    &lt;-- 模块<br>│<br>└── __init__.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><ul><li>每个 <code>.py</code> 文件是一个 <strong>模块</strong></li><li>有 <code>__init__.py</code> 的文件夹是一个 <strong>包</strong></li><li>整体集合就是一个 <strong>库</strong></li></ul><hr><h2 id="🧠-总结口诀："><a href="#🧠-总结口诀：" class="headerlink" title="🧠 总结口诀："></a>🧠 总结口诀：</h2><blockquote><p>✅ “类是蓝图，对象是实物，函数是工具，方法是专属功能，模块是.py文件，包是模块集合，库是你要装的那整个工具箱。”</p></blockquote><hr><h2 id="🎁-彩蛋：如何判断一个东西是函数还是方法？"><a href="#🎁-彩蛋：如何判断一个东西是函数还是方法？" class="headerlink" title="🎁 彩蛋：如何判断一个东西是函数还是方法？"></a>🎁 彩蛋：如何判断一个东西是函数还是方法？</h2><p>你可以在 Python 里运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(rospy.get_param))  <span class="hljs-comment"># &lt;class &#x27;function&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;abc&quot;</span>.upper))      <span class="hljs-comment"># &lt;class &#x27;builtin_function_or_method&#x27;&gt;</span><br></code></pre></td></tr></table></figure><hr><p>如果你希望我出一张思维导图来帮助你整理这些关系，也完全没问题！或者你有某段代码不知道它用的是哪种概念，也可以贴上来我帮你分析。想来点图示吗？<br><img src="/img/post_illust_img/Python_concept.png" alt="Python_Concept"></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何建立这样一个博客站</title>
    <link href="/2025/05/08/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99/"/>
    <url>/2025/05/08/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>也是一时兴起，用了两天时间大概搭建了这么一个简单的博客站，起因是昨天下午在图书馆坐立难安，感觉无所事事，在查一些东西时又翻到了本校学长建的博客站，想到自己以前也收藏了不少学长的站点，还从那下了不少资料，突然觉得自己也想搞一个博客站来记录我的各种笔记，于是就吭哧吭哧开干了</p><h2 id="关于开发的箴言与我的废话"><a href="#关于开发的箴言与我的废话" class="headerlink" title="关于开发的箴言与我的废话"></a>关于开发的箴言与我的废话</h2><p>以前看到过一个很有趣的缩写”STFW”，其实就是”Search the fxxking web”，素质很差，但很真实，开发上的问题要先从搜索开始。</p><p>然后要”RTFM”，其实也很没素质，是”Read the fxxking manual”，你能查到的不只是CSDN那些废料，还有各种 Document, Manual, Guide, Get started等等，比如本次建立的博客站。</p><p>说实话，每一步都像在跑样例，相比我之前调机器人的时候遇到的问题可简单多了，而且这个领域已经有各种各样的成熟方案，光是一个网站浏览量统计，这个Theme的作者就写了六种接口，简直不要太舒服。</p><h2 id="为什么建这么一个站"><a href="#为什么建这么一个站" class="headerlink" title="为什么建这么一个站"></a>为什么建这么一个站</h2><p>太健忘了(把在电脑上的笔记搬上来，万一以后别人问我技术细节，我当场掏出手机就能看)</p><p>而且我现在话贼多，每天水群都可以水两三个小时，建个站来写废话，反正运营不要钱</p><h2 id="怎么建这样一个博客站"><a href="#怎么建这样一个博客站" class="headerlink" title="怎么建这样一个博客站"></a>怎么建这样一个博客站</h2><p>相信眼尖的你已经注意到了，博客站的页脚基本都写了用的是什么框架和主题。确实，我用的是Hexo框架，Fluid主题，下面是官网链接，读手册就行，你肯定也能几天就建好一个博客站的，加油</p><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a>的官网详细写了怎么配环境以及初始化（我也是第一次用Node.js啊）</p><p>但其实官网基本没写怎么部署到Github Pages上，这个是我参考的教程<a href="https://zhuanlan.zhihu.com/p/60578464">感觉…知乎比CSDN好用</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Fluid主题</a>的作者很详尽的写了config里面的参数含义，以及怎么配置</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
