<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[医电]第二章</title>
    <link href="/2025/06/16/%E5%8C%BB%E7%94%B5-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2025/06/16/%E5%8C%BB%E7%94%B5-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>第二章是传感器与接口电路<br>这一章也是科普性质明显，稍微记录一些内容</p><hr><h1 id="1-传感器"><a href="#1-传感器" class="headerlink" title="1. 传感器"></a>1. 传感器</h1><p>传感器把物理量（非电量）转化为输出信号（电量）<br>包含敏感元件和转换元件<br>敏感元件：直接感受物理量的变化，输出与被测量成一定关系的物理量（非电量）<br>转换元件：把敏感元件输出的物理量转换为电量</p><h2 id="传感器的指标"><a href="#传感器的指标" class="headerlink" title="传感器的指标"></a>传感器的指标</h2><h3 id="静态特性"><a href="#静态特性" class="headerlink" title="静态特性"></a>静态特性</h3><p>静态特性是指传感器在稳定状态下的输入输出关系</p><h4 id="灵敏度"><a href="#灵敏度" class="headerlink" title="灵敏度"></a>灵敏度</h4><p>静态特性曲线的斜率</p><h4 id="线性特性"><a href="#线性特性" class="headerlink" title="线性特性"></a>线性特性</h4><p>静态特性曲线与理想直线的偏离程度<br>常见的情况<br><img src="/img/post_illust_img/postBioE/bioE02/image.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/bioE02/image-1.png" alt="alt text"><br>如果非线性项的方次不高，可以用线性化方法处理</p><h4 id="线性度"><a href="#线性度" class="headerlink" title="线性度"></a>线性度</h4><p>也叫非线性误差<br><img src="/img/post_illust_img/postBioE/bioE02/image-2.png" alt="alt text"></p><h4 id="常用的直线拟合方法"><a href="#常用的直线拟合方法" class="headerlink" title="常用的直线拟合方法"></a>常用的直线拟合方法</h4><p>过零旋转拟合，端点连线拟合，端点连线平移拟合，最小二乘法拟合<br><img src="/img/post_illust_img/postBioE/bioE02/image-3.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/bioE02/image-4.png" alt="alt text"></p><h4 id="迟滞"><a href="#迟滞" class="headerlink" title="迟滞"></a>迟滞</h4><p>正反行程误差<br><img src="/img/post_illust_img/postBioE/bioE02/image-5.png" alt="alt text"></p><h4 id="漂移"><a href="#漂移" class="headerlink" title="漂移"></a>漂移</h4><p>按变化对象分为零点漂移和灵敏度漂移<br>按影响因素分为时间漂移和温度漂移</p><h4 id="精确度"><a href="#精确度" class="headerlink" title="精确度"></a>精确度</h4><p>精确度由精密度和准确度组成<br>精密度：多次测量结果的离散程度<br>准确度：测量结果与真实值的接近程度<br><img src="/img/post_illust_img/postBioE/bioE02/image-6.png" alt="alt text"></p><h3 id="动态特性"><a href="#动态特性" class="headerlink" title="动态特性"></a>动态特性</h3><p>输入信号从某一稳定状态到另一稳定状态时输出信号也跟着变化</p><h4 id="瞬态响应"><a href="#瞬态响应" class="headerlink" title="瞬态响应"></a>瞬态响应</h4><p>输出信号到达新的稳定状态以前的响应特性，常用阶跃响应作为输入</p><h4 id="稳态响应"><a href="#稳态响应" class="headerlink" title="稳态响应"></a>稳态响应</h4><p>输出信号到达新的稳定状态以后的响应特性，常用正弦响应作为输入</p><h1 id="2-电阻式传感器及其接口电路"><a href="#2-电阻式传感器及其接口电路" class="headerlink" title="2. 电阻式传感器及其接口电路"></a>2. 电阻式传感器及其接口电路</h1><p>有压阻式和热阻式</p><h2 id="压阻式传感器"><a href="#压阻式传感器" class="headerlink" title="压阻式传感器"></a>压阻式传感器</h2><h3 id="电阻应变效应"><a href="#电阻应变效应" class="headerlink" title="电阻应变效应"></a>电阻应变效应</h3><p>电阻的相对变化率和应变成正比<br><img src="/img/post_illust_img/postBioE/bioE02/image-7.png" alt="alt text"><br>截面为圆形的金属丝推导得到的电阻应变效应<br>推导可以自行推导<br><img src="/img/post_illust_img/postBioE/bioE02/image-8.png" alt="alt text"></p><h3 id="应变片种类"><a href="#应变片种类" class="headerlink" title="应变片种类"></a>应变片种类</h3><p>这里只讲了丝式应变片，并且下面讨论的都是金属的<br><img src="/img/post_illust_img/postBioE/bioE02/image-9.png" alt="alt text"></p><ul><li>注意回线式应变片易出现横向效应</li></ul><h4 id="应变片的参数"><a href="#应变片的参数" class="headerlink" title="应变片的参数"></a>应变片的参数</h4><p><img src="/img/post_illust_img/postBioE/bioE02/image-12.png" alt="alt text"></p><ul><li>应变片的灵敏系数<br><img src="/img/post_illust_img/postBioE/bioE02/image-10.png" alt="alt text"><ul><li>灵敏轴线：纵轴线，平行于最大主应力方向</li><li>灵敏度：小于电阻丝的灵敏度，因为横向效应的影响</li></ul></li></ul><h4 id="横向效应"><a href="#横向效应" class="headerlink" title="横向效应"></a>横向效应</h4><p><img src="/img/post_illust_img/postBioE/bioE02/image-11.png" alt="alt text"></p><h4 id="应变片还需要注意"><a href="#应变片还需要注意" class="headerlink" title="应变片还需要注意"></a>应变片还需要注意</h4><ol><li>应变极限</li><li>机械滞后：加载和卸载时应变值不一致，最大差值即为机械滞后</li><li>最高工作频率：应变以应变波形式传播，响应需要时间，频率过高会导致响应不及时<br><strong>最高工作频率与应变片基长l有关</strong></li><li>阻值：最常见的应变片阻值为120Ω<br><strong>应变片阻值越大，允许工作电流增大，可提高灵敏度</strong>，降低温度漂移，但也会增加热噪声</li><li>最大工作电流：通常允许的电流值在静态测量时取<strong>25mA</strong>左右，动态测量时可高一些；箔式应变片可达<strong>500mA</strong><br><strong>工作电流越大，应变片的输出信号越大，测量灵敏度越高</strong></li><li>零漂和蠕变<ul><li>零漂：在一定温度下，不承受机械应变时，其指示应变随时间而变化的特性</li><li>蠕变：在一定温度下，承受恒定机械应变时，其指示应变随时间而变化的特性</li></ul></li></ol><h4 id="温度误差以及温度补偿"><a href="#温度误差以及温度补偿" class="headerlink" title="温度误差以及温度补偿"></a>温度误差以及温度补偿</h4><p>温度误差几乎会产生和应变片输出信号同样大的误差，必须进行温度补偿</p><p>温度补偿方法有</p><ol><li>桥路补偿法<br><img src="/img/post_illust_img/postBioE/bioE02/image-13.png" alt="alt text"><br>测量弯曲应变时，两个应变片分别贴在上下表面，但此时输出为两倍，提高了灵敏度，补偿了温度误差<br><img src="/img/post_illust_img/postBioE/bioE02/image-14.png" alt="alt text"></li></ol><h4 id="半导体材料的压阻式传感器"><a href="#半导体材料的压阻式传感器" class="headerlink" title="半导体材料的压阻式传感器"></a>半导体材料的压阻式传感器</h4><p>半导体材料有压阻效应<br>定义：半导体材料在机械应力的作用下，材料本身的电阻率发生较大变化的现象，称为压阻效应</p><ul><li>特点：<br>半导体应变片的灵敏系数比金属应变片大几十倍至一百多倍<br><strong>并且具有方向性，无横向效应</strong><br>但是温度系数大，应变时非线性比较大</li></ul><h2 id="热敏式传感器"><a href="#热敏式传感器" class="headerlink" title="热敏式传感器"></a>热敏式传感器</h2><h3 id="热电阻效应"><a href="#热电阻效应" class="headerlink" title="热电阻效应"></a>热电阻效应</h3><p><img src="/img/post_illust_img/postBioE/bioE02/image-15.png" alt="alt text"><br>这个式子里面，实际情况都不是线性，都是非线性的多项式</p><h4 id="温度系数"><a href="#温度系数" class="headerlink" title="温度系数"></a>温度系数</h4><p>温度系数的定义：温度每升高1℃，电阻的相对变化率, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">R_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是初始电阻值</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>α</mi><mo>=</mo><mfrac><mn>1</mn><msub><mi>R</mi><mn>0</mn></msub></mfrac><mfrac><mrow><mi>d</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>T</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\alpha = \frac{1}{R_0}\frac{dR}{dT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2074em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p><strong>α决定了斜率，斜率越大，灵敏度越高</strong></p><h4 id="材料对比"><a href="#材料对比" class="headerlink" title="材料对比"></a>材料对比</h4><p><img src="/img/post_illust_img/postBioE/bioE02/image-16.png" alt="alt text"></p><ul><li>最佳材料是铂</li><li>铜：常用，体积大，灵敏度高于铂（因为α大），但温度范围小，因为电阻效应中有3次项，线性区域小</li></ul><h2 id="半导体热敏电阻"><a href="#半导体热敏电阻" class="headerlink" title="半导体热敏电阻"></a>半导体热敏电阻</h2><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li>半导体热敏电阻：<strong>体积小、灵敏度高、长期稳定性好</strong></li><li>金属热敏电阻：<strong>精度高、线性好、稳定性好</strong></li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>正温度系数热敏电阻（PTC）</li><li>负温度系数热敏电阻（NTC）</li><li>临界温度热敏电阻（CTR）</li></ul><h3 id="NTC热敏电阻"><a href="#NTC热敏电阻" class="headerlink" title="NTC热敏电阻"></a>NTC热敏电阻</h3><p>温度系数一般为-3%～-5%（比金属大10倍左右）<br>某些玻璃封装的器件，稳定度可达：±0.2%&#x2F;年<br>NTC常用于温度测量和温度补偿</p><ul><li>电阻—温度特性<br><img src="/img/post_illust_img/postBioE/bioE02/image-17.png" alt="alt text"></li><li>温度系数<br><img src="/img/post_illust_img/postBioE/bioE02/image-18.png" alt="alt text"></li><li>伏安特性<br>实际上有直线段，可用于测量温度，但只在电流较小时保持线性，后续温度上升，阻值变小，电压迅速下降<br><img src="/img/post_illust_img/postBioE/bioE02/image-19.png" alt="alt text"></li></ul><h3 id="半导体热敏电阻的线性化"><a href="#半导体热敏电阻的线性化" class="headerlink" title="半导体热敏电阻的线性化"></a>半导体热敏电阻的线性化</h3><ul><li>并联网络线性化</li><li>串联网络线性化</li></ul><h4 id="并联网络线性化"><a href="#并联网络线性化" class="headerlink" title="并联网络线性化"></a>并联网络线性化</h4><p><img src="/img/post_illust_img/postBioE/bioE02/image-20.png" alt="alt text"><br>将拐点处的电阻值R0和温度T0作为线性化的参考点，也是测温范围的中点</p><ul><li>注意记一下公式<br><img src="/img/post_illust_img/postBioE/bioE02/image-21.png" alt="alt text"></li></ul><h4 id="串联网络线性化"><a href="#串联网络线性化" class="headerlink" title="串联网络线性化"></a>串联网络线性化</h4><p><img src="/img/post_illust_img/postBioE/bioE02/image-22.png" alt="alt text"><br>实际上是一样的，换成算电导了<br><img src="/img/post_illust_img/postBioE/bioE02/image-23.png" alt="alt text"></p><h4 id="线性化的结果"><a href="#线性化的结果" class="headerlink" title="线性化的结果"></a>线性化的结果</h4><p>温度系数减小，灵敏度减小，线性度提高<br><img src="/img/post_illust_img/postBioE/bioE02/image-24.png" alt="alt text"></p><h2 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h2><p><img src="/img/post_illust_img/postBioE/bioE02/image-25.png" alt="alt text"><br>直接带公式就行，注意这个公式的适用条件是，必须是e指数，指数上必须是1&#x2F;T<br>也就是说<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><msub><mi>R</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">lnR_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">1/T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>成正比</p><h1 id="3-电阻式传感器测量电路"><a href="#3-电阻式传感器测量电路" class="headerlink" title="3. 电阻式传感器测量电路"></a>3. 电阻式传感器测量电路</h1><h2 id="电桥"><a href="#电桥" class="headerlink" title="电桥"></a>电桥</h2><p>惠斯通电桥<br><img src="/img/post_illust_img/postBioE/bioE02/image-26.png" alt="alt text"></p><h3 id="戴维南"><a href="#戴维南" class="headerlink" title="戴维南"></a>戴维南</h3><p>略</p><h3 id="直流电桥的灵敏度"><a href="#直流电桥的灵敏度" class="headerlink" title="直流电桥的灵敏度"></a>直流电桥的灵敏度</h3><p><img src="/img/post_illust_img/postBioE/bioE02/image-27.png" alt="alt text"></p><h3 id="改进电桥"><a href="#改进电桥" class="headerlink" title="改进电桥"></a>改进电桥</h3><p><img src="/img/post_illust_img/postBioE/bioE02/image-28.png" alt="alt text"><br>灵敏度大，但可能有温漂</p><ol><li>如果保证两支路电阻相同，则可以不受温度影响<br><img src="/img/post_illust_img/postBioE/bioE02/image-29.png" alt="alt text"></li><li>偏好使用电流源<br><img src="/img/post_illust_img/postBioE/bioE02/image-30.png" alt="alt text"></li><li>差动式电桥可以提高灵敏度<br>差动，是要让同一支路的两个电阻变化相反<br><img src="/img/post_illust_img/postBioE/bioE02/image-31.png" alt="alt text"></li><li>零位补偿<br>零位输出：仪器在输入信号为零时的输出，理想状态为0<br>要微调桥臂阻值，满足零位输出<ul><li>串联零位补偿</li><li>并联零位补偿</li><li>双桥零位补偿</li></ul></li><li>温漂补偿<ul><li>热敏补偿</li><li>非热敏补偿</li></ul></li></ol><p><img src="/img/post_illust_img/postBioE/bioE02/image-32.png" alt="alt text"><br>6. 灵敏度温漂补偿<br>一般是把具有负温度系数的二极管PN结扩散在电源回路中进行补偿<br>7. 标准化补偿</p><p>实际补偿倾向于补偿影响较大的指标，比如温度漂移<br><img src="/img/post_illust_img/postBioE/bioE02/image-33.png" alt="alt text"></p><h2 id="电极"><a href="#电极" class="headerlink" title="电极"></a>电极</h2><p>半电池，必须要有金属和电解质接触</p><h3 id="电极电位"><a href="#电极电位" class="headerlink" title="电极电位"></a>电极电位</h3><p>电极电位是指在电极和电解质接触面上，电极表面与电解质之间的界面处的电位<br><img src="/img/post_illust_img/postBioE/bioE02/image-34.png" alt="alt text"></p><h3 id="电极极化"><a href="#电极极化" class="headerlink" title="电极极化"></a>电极极化</h3><h4 id="极化现象"><a href="#极化现象" class="headerlink" title="极化现象"></a>极化现象</h4><ol><li>标准定义：电极与电解质溶液的双电层界面在有电流通过时，电极-电解质溶液界面电位从原有的平衡电位E(0)变为一个新的、与电流密度有关的电极电位E(i)，这种偏离现象被称为极化现象。</li><li>简略：电极极化是指在电极和电解质接触面上，电极表面与电解质之间的界面处的电位因电流通过而发生变化的现象<br>通常用极化电压（超电压）η来定量描述极化现象<br>η &#x3D; E(i) - E(0)<br><img src="/img/post_illust_img/postBioE/bioE02/image-35.png" alt="alt text"><br><strong>极化对生物电的测量和电刺激都有影响</strong><br>对于电刺激，会阻碍电流进入人体，可以用<strong>交流电代替直流电</strong>减小极化的影响<br>对于测量，极化电压会被一起传入，而且超电压远大于生物电信号，造成失真，要设法减小电极极化，并<strong>减小前置放大器的增益</strong>，避免饱和失真</li></ol><h3 id="电极的电学特性"><a href="#电极的电学特性" class="headerlink" title="电极的电学特性"></a>电极的电学特性</h3><ol><li>等效模型<br><img src="/img/post_illust_img/postBioE/bioE02/image-36.png" alt="alt text"><br>电极阻抗：将电极-电解液界面的系统阻抗称为电极阻抗<br>根据上面的建模计算，可得电极的频率特性<br><img src="/img/post_illust_img/postBioE/bioE02/image-37.png" alt="alt text"></li></ol><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p><img src="/img/post_illust_img/postBioE/bioE02/image-38.png" alt="alt text"></p><ol><li>感谢你自己<br><img src="/img/post_illust_img/postBioE/bioE02/image-39.png" alt="alt text"></li><li>上面有<br><img src="/img/post_illust_img/postBioE/bioE02/image-40.png" alt="alt text"><br>3和4基本可略过，看一下以前的解<br><img src="/img/post_illust_img/postBioE/bioE02/image-41.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/bioE02/image-42.png" alt="alt text"></li></ol><h1 id="4-生物医用电极及其接口电路"><a href="#4-生物医用电极及其接口电路" class="headerlink" title="4. 生物医用电极及其接口电路"></a>4. 生物医用电极及其接口电路</h1><h2 id="电极的分类"><a href="#电极的分类" class="headerlink" title="电极的分类"></a>电极的分类</h2><h3 id="按极化特性分类"><a href="#按极化特性分类" class="headerlink" title="按极化特性分类"></a>按极化特性分类</h3><ol><li>极化电极：在给电极施加电压或通入电流时，在电极和电解质溶液界面上无电荷通过，而有位移电流通过的电极</li></ol><ul><li>简单来说就是电极和电解质之间有双电层，电流通过时没有电荷通过，类似于电容器</li><li>惰性金属电极Ag,Au,Pt</li></ul><ol start="2"><li>非极化电极：不需要能量，就能让电流自动通过电极和电解质溶液界面的电极</li></ol><ul><li>非极化电极不存在超电压</li><li>例如：Ag&#x2F;AgCl电极，甘汞电极</li><li>进行生物电测量时，非极化电极是首选</li></ul><h3 id="按工作性质分类"><a href="#按工作性质分类" class="headerlink" title="按工作性质分类"></a>按工作性质分类</h3><p>检测电极和刺激电极<br>同时有检测和刺激功能的电极，心脏起搏器</p><h3 id="按大小"><a href="#按大小" class="headerlink" title="按大小"></a>按大小</h3><p>宏电极和微电极</p><ul><li>宏电极有体表电极和体内电极，体内电极有植入电极和皮下电极</li><li>微电极可分为金属微电极和填充电解质溶液的玻璃微电极，可检测细胞电活动</li></ul><h2 id="电极的生物学应用"><a href="#电极的生物学应用" class="headerlink" title="电极的生物学应用"></a>电极的生物学应用</h2><p>Ag&#x2F;AgCl电极<br><img src="/img/post_illust_img/postBioE/bioE02/image-43.png" alt="alt text"><br>适合做检测电极<br>但如果对Ag&#x2F;AgCl电极通入较大的电流，它也会产生极化电压（超电压）<br><img src="/img/post_illust_img/postBioE/bioE02/image-44.png" alt="alt text"></p><h3 id="使用要注意的地方"><a href="#使用要注意的地方" class="headerlink" title="使用要注意的地方"></a>使用要注意的地方</h3><ul><li>用于皮肤时要涂抹Cl-盐溶液，或是导电膏</li><li>工作电流应控制在10e-9A以下，电流过大会导致Ag全部氧化或AgCl全部还原</li></ul><h3 id="应用中的问题"><a href="#应用中的问题" class="headerlink" title="应用中的问题"></a>应用中的问题</h3><h4 id="运动伪差"><a href="#运动伪差" class="headerlink" title="运动伪差"></a>运动伪差</h4><p>由运动产生的电势差称为运动伪差<br>主要出现在极化电极，所以Ag&#x2F;AgCl电极运动伪差很小<br>减小办法:</p><ul><li>尽量保持放置电极的局部皮肤不变形，使电极&#x2F;导电膏&#x2F;皮肤界面稳定</li><li>对皮肤进行充分打磨，减小表皮阻抗</li></ul><h4 id="工频干扰"><a href="#工频干扰" class="headerlink" title="工频干扰"></a>工频干扰</h4><ul><li>工频干扰：市电50Hz的干扰<ul><li>差模干扰：干扰电压使检测仪器的一个输入端的电势相对于另一个输入端发生变化，因而干扰电压与检测信号电压混合而影响输出<br>  简单来说就是<strong>两个输入端受到干扰变化不一样</strong></li><li>共模干扰：干扰电压使检测仪器的两个输入端的电势变化相同。若放大器的两个输入端不完全对称，则共模干扰也会变成差模干扰而影响输出<br>  受到干扰变化相同</li></ul></li></ul><h2 id="其他传感器"><a href="#其他传感器" class="headerlink" title="其他传感器"></a>其他传感器</h2><h3 id="压电传感器"><a href="#压电传感器" class="headerlink" title="压电传感器"></a>压电传感器</h3><p>正压电效应：机械能转化为电能<br>逆压电效应：外加电场，电能转化为机械能</p><ul><li>压电传感器只适合测量动态信号，不适合测量静态信号</li><li>等效电路<br><img src="/img/post_illust_img/postBioE/bioE02/image-45.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/bioE02/image-46.png" alt="alt text"></li></ul><h3 id="电容式传感器"><a href="#电容式传感器" class="headerlink" title="电容式传感器"></a>电容式传感器</h3><p>略</p><h3 id="电感式传感器"><a href="#电感式传感器" class="headerlink" title="电感式传感器"></a>电感式传感器</h3><p>略</p><h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><p><img src="/img/post_illust_img/postBioE/bioE02/image-47.png" alt="alt text"><br>2. 由于压电传感器等效为一个电荷源Q与电容Ce串联或并联的电路，需要考虑电荷在馈线中的耗散，若输出信号通过较长的馈线引入，则需要选择电荷放大器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生物医学电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[医电]第一章</title>
    <link href="/2025/06/16/%E5%8C%BB%E7%94%B5-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2025/06/16/%E5%8C%BB%E7%94%B5-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>生物医学电子是一门由生医学院自主研发的 40+16学时硬核修行课程。在这片 「生物电の幻想大陆」 中，您将自由学习、邂逅传感器、结缘放大电路、感悟滤波器奥义，并在40个理论学时内探索 A&#x2F;D转换、D&#x2F;A转换、SAS、DSP 等 「上古卷轴」 的终极奥秘。</p><hr><p>绪论<br>我也不知道这一章有什么东西重要</p><h1 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h1><h2 id="信噪比SNR"><a href="#信噪比SNR" class="headerlink" title="信噪比SNR"></a>信噪比SNR</h2><p>信噪比（Signal-to-Noise Ratio, SNR）是一个重要的指标，用于衡量信号的强度与噪声的强度之间的比率。它通常以分贝（dB）为单位表示，计算公式为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>=</mo><mn>10</mn><mo>⋅</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>10</mn></msub><mrow><mo fence="true">(</mo><mfrac><msub><mi>P</mi><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></msub><msub><mi>P</mi><mrow><mi>n</mi><mi>o</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></msub></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">SNR = 10 \cdot \log_{10}\left(\frac{P_{signal}}{P_{noise}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">SNR</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">se</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">na</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span><p>信号的强度用幅度来衡量，比如信号的功率为</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>P</mi><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mi>T</mi></mfrac><msubsup><mo>∫</mo><mn>0</mn><mi>T</mi></msubsup><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">P_{signal} = \frac{1}{T}\int_0^T |x(t)|^2 dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">na</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5032em;vertical-align:-0.9119em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5912em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span></span><h2 id="噪声系数NF"><a href="#噪声系数NF" class="headerlink" title="噪声系数NF"></a>噪声系数NF</h2><p>噪声系数（Noise Figure, NF）是一个衡量放大器或系统在引入噪声时的性能指标。它定义为输入信号与输出信号的信噪比之比，通常以分贝（dB）表示。计算公式为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mi>F</mi><mo>=</mo><mn>10</mn><mo>⋅</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>10</mn></msub><mrow><mo fence="true">(</mo><mfrac><mrow><mi>S</mi><mi>N</mi><msub><mi>R</mi><mrow><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><mrow><mi>S</mi><mi>N</mi><msub><mi>R</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">NF = 10 \cdot \log_{10}\left(\frac{SNR_{input}}{SNR_{output}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">NF</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4221em;vertical-align:-0.9721em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">tp</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span><p>里面的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>N</mi><msub><mi>R</mi><mrow><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">SNR_{input}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>N</mi><msub><mi>R</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">SNR_{output}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">tp</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>分别是输入和输出信号的信噪比。<br>二者的比值也叫噪声因子(F)</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><mrow><mi>S</mi><mi>N</mi><msub><mi>R</mi><mrow><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><mrow><mi>S</mi><mi>N</mi><msub><mi>R</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">F = \frac{SNR_{input}}{SNR_{output}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3324em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">tp</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><h2 id="噪声的种类"><a href="#噪声的种类" class="headerlink" title="噪声的种类"></a>噪声的种类</h2><p>噪声可以分为多种类型，主要包括：<br>温度噪声：与布朗运动相关的噪声，通常在高温下更明显。<br>1&#x2F;f噪声：又称闪烁噪声，通常在低频段更明显，电流流经半导体材料时会产生。<br>伪迹：运动引起的噪声<br>干扰：外部信号对测量信号的影响，通常表现为频谱中的杂散成分。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生物医学电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号3</title>
    <link href="/2025/06/15/%E4%BF%A1%E5%8F%B73/"/>
    <url>/2025/06/15/%E4%BF%A1%E5%8F%B73/</url>
    
    <content type="html"><![CDATA[<p>这一章是系统的复频域分析，这是一个难评的章节，似乎并不是重点</p><h1 id="拉普拉斯变换"><a href="#拉普拉斯变换" class="headerlink" title="拉普拉斯变换"></a>拉普拉斯变换</h1><p>定义略</p><h2 id="收敛域"><a href="#收敛域" class="headerlink" title="收敛域"></a>收敛域</h2><p>拉普拉斯变换的收敛域是指复平面上使得拉普拉斯变换积分收敛的区域。对于函数f(t)，其拉普拉斯变换定义为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>s</mi><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">F(s) = \int_{0}^{\infty} f(t) e^{-st} dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3262em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span></span><p>收敛域是复数s的集合，<strong>使得上述积分存在且有限</strong>。通常，收敛域可以用s的实部和虚部来描述。<br><img src="/img/post_illust_img/postBioE/sig03/image.png" alt="alt text"></p><ul><li>当收敛域包含实轴时，或边界在实轴上，傅里叶变换和拉普拉斯变换同时存在。</li><li>当收敛域不包含实轴时，傅里叶变换不存在，只有拉普拉斯变换存在。<br>一些例题<br><img src="/img/post_illust_img/postBioE/sig03/image-1.png" alt="alt text"></li></ul><h2 id="拉普拉斯变换的性质"><a href="#拉普拉斯变换的性质" class="headerlink" title="拉普拉斯变换的性质"></a>拉普拉斯变换的性质</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-2.png" alt="alt text"><br>简单看一下就好，你能看出重点不在这里，注意这是一张双边拉普拉斯变换的性质表<br>下面是一张单边拉普拉斯变换的性质表</p><table><thead><tr><th>性质</th><th>时域表达（x(t)）</th><th>拉氏变换（X(s)）表达（单边）</th><th>说明</th></tr></thead><tbody><tr><td>线性性</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> a x_1(t) + b x_2(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><msub><mi>X</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> a X_1(s) + b X_2(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>拉氏变换是线性的</td></tr><tr><td>延时</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mi>u</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> x(t - t_0)u(t - t_0) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">u</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mi>s</mi><msub><mi>t</mi><mn>0</mn></msub></mrow></msup><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> e^{-st_0} X(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0436em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7936em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">s</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>含单位阶跃函数</td></tr><tr><td>微分（一次）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \frac{d}{dt}x(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>−</mo><mi>x</mi><mo stretchy="false">(</mo><msup><mn>0</mn><mo>−</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> sX(s) - x(0^-) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>需减初始值项</td></tr><tr><td>微分（二次）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msup><mi>d</mi><mn>2</mn></msup><mrow><mi>d</mi><msup><mi>t</mi><mn>2</mn></msup></mrow></mfrac><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \frac{d^2}{dt^2}x(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3629em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0179em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>s</mi><mn>2</mn></msup><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>−</mo><mi>s</mi><mi>x</mi><mo stretchy="false">(</mo><msup><mn>0</mn><mo>−</mo></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msup><mn>0</mn><mo>−</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> s^2 X(s) - s x(0^-) - x&#x27;(0^-) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>初始值更复杂</td></tr><tr><td>积分</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><msup><mn>0</mn><mo>−</mo></msup><mi>t</mi></msubsup><mi>x</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mi>d</mi><mi>τ</mi></mrow><annotation encoding="application/x-tex"> \int_{0^-}^{t} x(\tau) d\tau </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3443em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>s</mi></mfrac><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \frac{1}{s}X(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>无需加初值</td></tr><tr><td>时域乘指数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mi>a</mi><mi>t</mi></mrow></msup><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> e^{a t} x(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0436em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7936em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> X(s - a) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></td><td>s 轴左移</td></tr><tr><td>s域微分</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>t</mi><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> -t x(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>s</mi></mrow></mfrac><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \frac{d}{ds}X(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>求导对应乘以 t</td></tr><tr><td>卷积</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> x_1(t) * x_2(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><msub><mi>X</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> X_1(s) X_2(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>卷积变乘积</td></tr><tr><td>单位阶跃函数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> u(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex"> \frac{1}{s} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td>常用基本信号</td></tr><tr><td>单位冲激函数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \delta(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex"> 1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td>δ函数变常数</td></tr><tr><td>单位斜坡函数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>⋅</mo><mi>u</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> t \cdot u(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msup><mi>s</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex"> \frac{1}{s^2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td>斜坡变平方项</td></tr><tr><td>初值定理</td><td>无</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><msup><mn>0</mn><mo>+</mo></msup><mo stretchy="false">)</mo><mo>=</mo><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>s</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>s</mi><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> x(0^+) = \lim_{s \to \infty} sX(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>求瞬时初值</td></tr><tr><td>终值定理</td><td>无</td><td>若极限存在，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>s</mi><mo>→</mo><mn>0</mn></mrow></msub><mi>s</mi><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> x(\infty) = \lim_{s \to 0} sX(s) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">∞</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></td><td>求稳态值</td></tr><tr><td><strong>注意，积分下限为0时，初始值为0；积分下限为负时，初始值为负，如下例题</strong></td><td></td><td></td><td></td></tr><tr><td><strong>使用微分形式建模，可以自然分离出初始值项</strong></td><td></td><td></td><td></td></tr></tbody></table><h1 id="连续系统响应的复频域分析"><a href="#连续系统响应的复频域分析" class="headerlink" title="连续系统响应的复频域分析"></a>连续系统响应的复频域分析</h1><p>一些在电路分析中的S域模型<br><img src="/img/post_illust_img/postBioE/sig03/image-3.png" alt="alt text"><br>积分有误解，注意大V和小v的区别</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>s</mi><mi>C</mi></mrow></mfrac><mtext> </mtext><msub><mi>I</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>+</mo><mtext>  </mtext><mfrac><mrow><msub><mi>v</mi><mi>c</mi></msub><mo stretchy="false">(</mo><msup><mn>0</mn><mo>−</mo></msup><mo stretchy="false">)</mo></mrow><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex">V_c(s) = \frac{1}{sC}\,I_c(s) \;+\; \frac{v_c(0^-)}{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1343em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4483em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>例题<br><img src="/img/post_illust_img/postBioE/sig03/image-4.png" alt="alt text"></p><p>直接记公式算了</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>s</mi><mi>C</mi></mrow></mfrac><mtext> </mtext><msub><mi>I</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>+</mo><mtext>  </mtext><mfrac><mrow><msub><mi>v</mi><mi>c</mi></msub><mo stretchy="false">(</mo><msup><mn>0</mn><mo>−</mo></msup><mo stretchy="false">)</mo></mrow><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex">V_c(s) = \frac{1}{sC}\,I_c(s) \;+\; \frac{v_c(0^-)}{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1343em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4483em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>积分是加号，微分是减号<br>1&#x2F;s的是v(0-)的初始值项进行拉氏变换，相当于常数</p><h1 id="系统函数H-s"><a href="#系统函数H-s" class="headerlink" title="系统函数H(s)"></a>系统函数H(s)</h1><p>定义：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>Y</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(s) = \frac{Y(s)}{X(s)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>和h(t)的关系：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi><mi>j</mi></mrow></mfrac><msubsup><mo>∫</mo><mrow><mi>c</mi><mo>−</mo><mi>j</mi><mi mathvariant="normal">∞</mi></mrow><mrow><mi>c</mi><mo>+</mo><mi>j</mi><mi mathvariant="normal">∞</mi></mrow></msubsup><mi>H</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mi>s</mi><mi>t</mi></mrow></msup><mi>d</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">h(t) = \frac{1}{2\pi j} \int_{c - j\infty}^{c + j\infty} H(s) e^{st} ds</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.6226em;vertical-align:-1.0481em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05724em;">πj</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5746em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span></span></span></span></span><h2 id="零极点"><a href="#零极点" class="headerlink" title="零极点"></a>零极点</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-5.png" alt="alt text"><br>分母为0的点称为极点，分子为0的点称为零点<br>零点都在收敛域内，极点可能在收敛域外</p><h2 id="零极点的系统稳定性"><a href="#零极点的系统稳定性" class="headerlink" title="零极点的系统稳定性"></a>零极点的系统稳定性</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-6.png" alt="alt text"></p><h1 id="离散时间信号与系统的Z域分析"><a href="#离散时间信号与系统的Z域分析" class="headerlink" title="离散时间信号与系统的Z域分析"></a>离散时间信号与系统的Z域分析</h1><p>Z变换用于分析离散时间信号和系统。Z变换的定义为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></munderover><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>z</mi><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">X(z) = \sum_{n=-\infty}^{\infty} x[n] z^{-n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9597em;vertical-align:-1.3083em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span><h2 id="S域和Z域的关系"><a href="#S域和Z域的关系" class="headerlink" title="S域和Z域的关系"></a>S域和Z域的关系</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-7.png" alt="alt text"></p><h2 id="双边Z变换"><a href="#双边Z变换" class="headerlink" title="双边Z变换"></a>双边Z变换</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-8.png" alt="alt text"><br>例题：<br><strong>记住公式即可</strong><br><img src="/img/post_illust_img/postBioE/sig03/image-9.png" alt="alt text"></p><h2 id="Z变化的收敛域"><a href="#Z变化的收敛域" class="headerlink" title="Z变化的收敛域"></a>Z变化的收敛域</h2><p>Z变换的收敛域用符号ROC表示，收敛条件是：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></munderover><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>z</mi><mrow><mo>−</mo><mi>n</mi></mrow></msup><mi mathvariant="normal">∣</mi><mo>=</mo><mi>M</mi><mo>&lt;</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\sum_{n=-\infty}^{\infty} |x[n] z^{-n}| = M &lt; \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9597em;vertical-align:-1.3083em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></span><h2 id="常用序列的Z变换"><a href="#常用序列的Z变换" class="headerlink" title="常用序列的Z变换"></a>常用序列的Z变换</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-10.png" alt="alt text"></p><h2 id="Z变换的性质"><a href="#Z变换的性质" class="headerlink" title="Z变换的性质"></a>Z变换的性质</h2><p>难评PPT<br><img src="/img/post_illust_img/postBioE/sig03/image-11.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig03/image-12.png" alt="alt text"></p><h1 id="离散时间系统响应的Z域分析"><a href="#离散时间系统响应的Z域分析" class="headerlink" title="离散时间系统响应的Z域分析"></a>离散时间系统响应的Z域分析</h1><p>H(z)定义为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>Y</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(z) = \frac{Y(z)}{X(z)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><h2 id="零极点-1"><a href="#零极点-1" class="headerlink" title="零极点"></a>零极点</h2><p>离散LTI系统的时域特性主要取决于零极点的分布。零极点的分布决定了系统的稳定性和频率响应。<br><img src="/img/post_illust_img/postBioE/sig03/image-13.png" alt="alt text"></p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p><img src="/img/post_illust_img/postBioE/sig03/image-14.png" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>生物医学电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号2</title>
    <link href="/2025/06/14/%E4%BF%A1%E5%8F%B72/"/>
    <url>/2025/06/14/%E4%BF%A1%E5%8F%B72/</url>
    
    <content type="html"><![CDATA[<p>连续信号的频域分析（并非）</p><h1 id="连续周期信号的频域分析"><a href="#连续周期信号的频域分析" class="headerlink" title="连续周期信号的频域分析"></a>连续周期信号的频域分析</h1><h2 id="傅里叶级数展开周期信号"><a href="#傅里叶级数展开周期信号" class="headerlink" title="傅里叶级数展开周期信号"></a>傅里叶级数展开周期信号</h2><p>狄利克雷条件：绝对可积，有限个间断点，有限个极值点<br><img src="/img/post_illust_img/postBioE/sig02/image.png" alt="alt text"><br>但为什么说(1)是充分不必要条件？因为若绝对可积，傅里叶级数就必然存在，是存在性的条件，但并非所有绝对可积的函数都满足 Dirichlet 条件，因此是必要但不充分条件。</p><p>为什么说(2)(3)是必要不充分条件？因为如果不满足这两个条件，傅里叶级数可能直接不收敛，但只满足这两个条件，傅里叶级数也可能不收敛，因为傅里叶级数可能直接不存在，因此是不充分条件。</p><p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> f(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 满足 Dirichlet 条件，则其傅里叶级数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><msub><mi>c</mi><mi>n</mi></msub><msup><mi>e</mi><mrow><mi>j</mi><mi>n</mi><msub><mi>ω</mi><mn>0</mn></msub><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex"> \sum_{n=-\infty}^{\infty} c_n e^{j n \omega_0 t} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1827em;vertical-align:-0.358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">jn</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span> 在连续点处收敛于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> f(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>，在不连续点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex"> t_0 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 处收敛于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>t</mi><mn>0</mn><mo>+</mo></msubsup><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>t</mi><mn>0</mn><mo>−</mo></msubsup><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex"> \frac{f(t_0^+) + f(t_0^-)}{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4486em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1036em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8477em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8477em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">−</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p><h2 id="指数形式"><a href="#指数形式" class="headerlink" title="指数形式"></a>指数形式</h2><p><img src="/img/post_illust_img/postBioE/sig02/image-1.png" alt="alt text"><br>PPT存在笔误，”<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo>±</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n=\pm2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord">2</span></span></span></span>的基波频率”，基波频率始终只有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">f_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><ul><li>基波频率是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mfrac><mn>1</mn><mi>T</mi></mfrac></mrow><annotation encoding="application/x-tex"> f_0 = \frac{1}{T} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，对应于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo>±</mo><mn>1</mn></mrow><annotation encoding="application/x-tex"> n = \pm 1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord">1</span></span></span></span> 项。</li><li>第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex"> n </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次谐波频率是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><msub><mi>f</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex"> n f_0 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，对应于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo>±</mo><mi>n</mi></mrow><annotation encoding="application/x-tex"> n = \pm n </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord mathnormal">n</span></span></span></span> 项。</li><li>指数形式中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub><msup><mi>e</mi><mrow><mi>j</mi><mi>n</mi><msub><mi>ω</mi><mn>0</mn></msub><mi>t</mi></mrow></msup><mo>+</mo><msub><mi>C</mi><mrow><mo>−</mo><mi>n</mi></mrow></msub><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>n</mi><msub><mi>ω</mi><mn>0</mn></msub><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex"> C_n e^{j n \omega_0 t} + C_{-n} e^{-j n \omega_0 t} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9747em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">jn</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.033em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2583em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">jn</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span> 合成后变为实数余弦分量：  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>2</mn><mi mathvariant="normal">∣</mi><msub><mi>C</mi><mi>n</mi></msub><mi mathvariant="normal">∣</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><msub><mi>ω</mi><mn>0</mn></msub><mi>t</mi><mo>+</mo><msub><mi>ϕ</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">  2|C_n| \cos(n \omega_0 t + \phi_n)  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>  所以我们说“两个频率合起来构成信号的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex"> n </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次谐波分量”。</li></ul><h2 id="什么是频谱图，幅频特性，相频特性"><a href="#什么是频谱图，幅频特性，相频特性" class="headerlink" title="什么是频谱图，幅频特性，相频特性"></a>什么是频谱图，幅频特性，相频特性</h2><p><img src="/img/post_illust_img/postBioE/sig02/image-2.png" alt="alt text"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>补充信号1的知识，Sa抽样函数，似乎有些资料将PPT中的sinc函数（归一化sinc函数）写为Sa抽样函数，而这里写的Sa抽样函数是非归一化的sinc函数</p><ul><li>理想低通滤波器的冲激响应一般就是归一化sinc函数<br><img src="/img/post_illust_img/postBioE/sig02/image-3.png" alt="alt text"><br>例题<br><img src="/img/post_illust_img/postBioE/sig02/image-4.png" alt="alt text"><br>这个积分形式必然出现Sa抽样函数的形式<br>自己算注意拆开e指数就行<br>注意Cn乘上T再取T极限，就可以得到单个矩形波的频谱函数</li></ul><p>补充：Sa抽样函数并不是用于采样的，而是用于信号的重建，冲激列用于采样，Shannon重建定理用于信号的重建</p><table><thead><tr><th>名称</th><th>数学表达</th><th>功能</th><th>正确术语</th></tr></thead><tbody><tr><td>冲激列</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>n</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum \delta(t - nT)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></td><td><strong>进行抽样</strong></td><td>抽样器 &#x2F; 采样函数</td></tr><tr><td>Sa 函数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>π</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><mrow><mi>π</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sin(\pi t)}{\pi t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">s</span><span class="mtight">i</span><span class="mtight">n</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight">t</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td><strong>进行重建</strong></td><td>理想重建核 &#x2F; sinc 函数</td></tr><tr><td>重建公式</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∑</mo><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mi>T</mi><mo stretchy="false">)</mo><mo>⋅</mo><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">c</mi></mrow><mrow><mo fence="true">(</mo><mfrac><mrow><mi>t</mi><mo>−</mo><mi>n</mi><mi>T</mi></mrow><mi>T</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">x(t) = \sum x(nT) \cdot \mathrm{sinc}\left( \frac{t - nT}{T} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2223em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathrm">sinc</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></td><td>插值重建</td><td>Shannon 重建公式</td></tr></tbody></table><p>例题中信号的频谱图<br>频谱图就是Cn这个傅里叶系数的图像，Cn在此处称为频谱函数（后面还有另一个）<br><img src="/img/post_illust_img/postBioE/sig02/image-5.png" alt="alt text"></p><h2 id="频谱的特性"><a href="#频谱的特性" class="headerlink" title="频谱的特性"></a>频谱的特性</h2><p>此处讨论的基本是周期信号的频谱特性</p><ol><li>周期信号的频谱是由间隔为ω0的谱线组成</li><li>周期T越大，频谱的谱线间隔越小，频谱越密集</li><li>随着谐波次数n的增大，频谱的幅度逐渐减小，逐渐趋近于0，如上图</li><li>在时域下，波形变化越平缓，频谱的高频成分越少，幅度频谱的衰减越快，带宽越窄</li><li>在时域下，波形变化越剧烈，频谱的高频成分越多，幅度频谱的衰减越慢，带宽越宽</li><li>需要注意：频谱无限，但带宽有限</li></ol><h2 id="吉伯斯现象-Gibbs-Phenomenon"><a href="#吉伯斯现象-Gibbs-Phenomenon" class="headerlink" title="吉伯斯现象(Gibbs Phenomenon)"></a>吉伯斯现象(Gibbs Phenomenon)</h2><p>用有限次谐波分量来近似原信号，在不连续点出现过冲，过冲峰值不随谐波分量增加而减少，且为跳变值的9%，Gibbs现象来自于重建信号</p><p>Gibbs 现象不是由 Sa 函数本身引起的，而是当用有限频率成分（如傅里叶级数有限项或带限重建）逼近具有跳变的信号时，在不连续点附近不可避免地出现的过冲和振铃。Sa 函数只是理想重建核，Gibbs 现象出现在其有限项叠加近似时</p><p>由于时间信号存在跳变破坏了信号的收敛性，使得在间断点傅里叶级数出现非一致收敛</p><h1 id="连续非周期信号的频域分析"><a href="#连续非周期信号的频域分析" class="headerlink" title="连续非周期信号的频域分析"></a>连续非周期信号的频域分析</h1><p>和复变函数一样，连续非周期信号的频域分析也是通过傅里叶变换来实现的</p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>T</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>T</mi><msub><mi>C</mi><mi>n</mi></msub><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>ω</mi><mi>t</mi></mrow></msup><mtext> </mtext><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">F(j\omega) = \lim_{T \to \infty} T C_n = \int_{-\infty}^{\infty} f(t) e^{-j \omega t} \, dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4388em;vertical-align:-0.7443em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.3557em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7443em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3846em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">jω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span></span><p>其实回过头看，继续以上面那个例题的图为例，当T趋于无穷，那么w0趋于0，傅里叶级数的频谱图就变成了傅里叶变换的频谱图，离散的频谱图变成了连续的频谱图</p><p>所以我们说，时域的周期信号，频域离散，时域的非周期信号，频域连续</p><h2 id="周期和非周期对比"><a href="#周期和非周期对比" class="headerlink" title="周期和非周期对比"></a>周期和非周期对比</h2><p>周期信号的频谱是Cn的分布，表示每个谐波分量的幅度和相位，频谱图是离散的谱线，间隔为ω0<br>非周期信号的频谱是TCn的分布，表示信号在所有频率上的幅度和相位，频谱图是连续的曲线</p><h2 id="频谱函数与频谱密度函数的对比"><a href="#频谱函数与频谱密度函数的对比" class="headerlink" title="频谱函数与频谱密度函数的对比"></a>频谱函数与频谱密度函数的对比</h2><p>频谱函数就是上面说的Cn，表示每个频率分量的幅度和相位，频谱图是离散的谱线<br>频谱密度函数是F(jw)，w原本是nw0，在傅里叶变换中变成了连续的ω，表示信号在所有频率上的幅度和相位(由于w0无穷小，nw0代表所有频率都是谐波分量)，频谱图是连续的曲线<br><img src="/img/post_illust_img/postBioE/sig02/image-6.png" alt="alt text"></p><h2 id="反变换"><a href="#反变换" class="headerlink" title="反变换"></a>反变换</h2><p><img src="/img/post_illust_img/postBioE/sig02/image-7.png" alt="alt text"></p><h1 id="常见连续时间信号的频谱"><a href="#常见连续时间信号的频谱" class="headerlink" title="常见连续时间信号的频谱"></a>常见连续时间信号的频谱</h1><p>当字典吧，我也没时间写成latex了，不用记忆，用到的时候可以现场推</p><h2 id="单位冲激信号"><a href="#单位冲激信号" class="headerlink" title="单位冲激信号"></a>单位冲激信号</h2><p><img src="/img/post_illust_img/postBioE/sig02/image-8.png" alt="alt text"></p><h2 id="双边指数信号"><a href="#双边指数信号" class="headerlink" title="双边指数信号"></a>双边指数信号</h2><p><img src="/img/post_illust_img/postBioE/sig02/image-9.png" alt="alt text"></p><h2 id="直流信号"><a href="#直流信号" class="headerlink" title="直流信号"></a>直流信号</h2><p>这里说一下，这是一个经典推导方式<br>直流信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex"> f(t) = 1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 不满足绝对可积条件，不能直接做傅里叶变换。采用极限逼近法，将其看作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>σ</mi><mo>→</mo><mn>0</mn></mrow></msub><msup><mi>e</mi><mrow><mo>−</mo><mi>σ</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mi mathvariant="normal">∣</mi></mrow></msup></mrow><annotation encoding="application/x-tex"> \lim_{\sigma \to 0} e^{-\sigma |t|} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.038em;vertical-align:-0.15em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mord mtight">∣</span><span class="mord mathnormal mtight">t</span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span></span></span></span>，先计算傅里叶变换 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>2</mn><mi>σ</mi></mrow><mrow><msup><mi>σ</mi><mn>2</mn></msup><mo>+</mo><msup><mi>ω</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex"> \frac{2\sigma}{\sigma^2 + \omega^2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，再取极限得出：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mi>π</mi><mi>δ</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}[1] = 2\pi \delta(\omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span></span><p>并且，此处的双边指数的傅里叶变换的极限是单位冲激函数的一个定义式，在w&#x3D;0处无穷大，但面积为2pi，如图中下面两个式子<br><img src="/img/post_illust_img/postBioE/sig02/image-10.png" alt="alt text"></p><h2 id="符号函数信号"><a href="#符号函数信号" class="headerlink" title="符号函数信号"></a>符号函数信号</h2><p>可利用上述的直流的推导方式<br><img src="/img/post_illust_img/postBioE/sig02/image-11.png" alt="alt text"></p><h2 id="单位阶跃信号"><a href="#单位阶跃信号" class="headerlink" title="单位阶跃信号"></a>单位阶跃信号</h2><p>将u(t)化成sgn(t)的形式再计算<br><img src="/img/post_illust_img/postBioE/sig02/image-12.png" alt="alt text"></p><h2 id="虚指数信号"><a href="#虚指数信号" class="headerlink" title="虚指数信号"></a>虚指数信号</h2><p>相当于在直流信号上乘一个虚指数信号<br>从复变函数的角度看，虚指数信号的傅里叶变换是一个平移的单位冲激函数<br><img src="/img/post_illust_img/postBioE/sig02/image-13.png" alt="alt text"></p><h2 id="正弦型信号"><a href="#正弦型信号" class="headerlink" title="正弦型信号"></a>正弦型信号</h2><p>也是类似的，复习一下正余弦的欧拉公式<br><img src="/img/post_illust_img/postBioE/sig02/image-14.png" alt="alt text"></p><h2 id="单位冲激序列"><a href="#单位冲激序列" class="headerlink" title="单位冲激序列"></a>单位冲激序列</h2><p>由于是周期函数，可以先做傅里叶级数展开，再做傅里叶变换<br>注意自己推导一下<br>下面作业题算了一遍<br><img src="/img/post_illust_img/postBioE/sig02/image-15.png" alt="alt text"></p><h2 id="傅里叶变换的性质"><a href="#傅里叶变换的性质" class="headerlink" title="傅里叶变换的性质"></a>傅里叶变换的性质</h2><p>多数略，时移特性，频移特性，时移符号相同，频移符号相反<br>时移特性</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>ω</mi><msub><mi>t</mi><mn>0</mn></msub></mrow></msup><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}[f(t - t_0)] = e^{-j \omega t_0} F(j \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">jω</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span></span></span></span></span><p>频移特性</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mo stretchy="false">[</mo><msup><mi>e</mi><mrow><mi>j</mi><msub><mi>ω</mi><mn>0</mn></msub><mi>t</mi></mrow></msup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">(</mo><mi>ω</mi><mo>−</mo><msub><mi>ω</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}[e^{j \omega_0 t} f(t)] = F(j (\omega - \omega_0))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></span><p>例题<br><img src="/img/post_illust_img/postBioE/sig02/image-16.png" alt="alt text"><br>建议记住矩形波</p><h3 id="展缩特性"><a href="#展缩特性" class="headerlink" title="展缩特性"></a>展缩特性</h3><p>复习</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mi>F</mi><mrow><mo fence="true">(</mo><mfrac><mrow><mi>j</mi><mi>ω</mi></mrow><mi>a</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathscr{F}[f(at)] = \frac{1}{|a|} F\left( \frac{j \omega}{a} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathnormal">a</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span><p>例题<br>乘余弦信号，拆开然后利用频移<br><img src="/img/post_illust_img/postBioE/sig02/image-17.png" alt="alt text"></p><h3 id="时域微分特性"><a href="#时域微分特性" class="headerlink" title="时域微分特性"></a>时域微分特性</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mrow><mo fence="true">[</mo><mfrac><mrow><msup><mi>d</mi><mi>n</mi></msup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><msup><mi>t</mi><mi>n</mi></msup></mrow></mfrac><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}\left[\frac{d^n f(t)}{dt^n}\right] = (j \omega)^n F(j \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span></span></span></span></span><p>微分会突出高频成分，放大高频成分，所以乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex"> j \omega </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span></span></span></span> 的幂次</p><h3 id="时域积分特性"><a href="#时域积分特性" class="headerlink" title="时域积分特性"></a>时域积分特性</h3><p>不存在直流分量的情况下，时域积分特性是</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mrow><mo fence="true">[</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi>t</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>τ</mi><mo fence="true">]</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>j</mi><mi>ω</mi></mrow></mfrac><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}\left[\int_{-\infty}^{t} f(\tau) \, d\tau\right] = \frac{1}{j \omega} F(j \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5137em;vertical-align:-0.9703em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5435em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2019em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span></span></span></span></span><p>存在直流分量的情况下，时域积分特性是</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mrow><mo fence="true">[</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi>t</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>τ</mi><mo fence="true">]</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>j</mi><mi>ω</mi></mrow></mfrac><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo>+</mo><mi>π</mi><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}\left[\int_{-\infty}^{t} f(\tau) \, d\tau\right] = \frac{1}{j \omega} F(j \omega) + \pi F(0)\delta(\omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5137em;vertical-align:-0.9703em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5435em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2019em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span></span><h3 id="时域卷积特性"><a href="#时域卷积特性" class="headerlink" title="时域卷积特性"></a>时域卷积特性</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">F</mi><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mi>G</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}[f(t) * g(t)] = F(j \omega) G(j \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span></span></span></span></span><p>很简单，时域卷积对应频域乘积</p><h3 id="频域卷积特性"><a href="#频域卷积特性" class="headerlink" title="频域卷积特性"></a>频域卷积特性</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi mathvariant="script">F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">[</mo><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>G</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathscr{F}^{-1}[F(j \omega) * G(j \omega)] = f(t) g(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span><p>频域卷积对应时域乘积</p><h3 id="非周期信号的能量谱密度"><a href="#非周期信号的能量谱密度" class="headerlink" title="非周期信号的能量谱密度"></a>非周期信号的能量谱密度</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E(\omega) = |F(j \omega)|^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><h3 id="帕斯瓦尔能量守恒定理"><a href="#帕斯瓦尔能量守恒定理" class="headerlink" title="帕斯瓦尔能量守恒定理"></a>帕斯瓦尔能量守恒定理</h3><p>中间的是频域能量，但是用角频率表示，最右边也是频域能量，但用频率表示<br>帕斯瓦尔能量守恒定理表明，连续时间信号的总能量在时域和频域之间是等价的，即：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>t</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi></mrow></mfrac><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi mathvariant="normal">∣</mi><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>ω</mi><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi mathvariant="normal">∣</mi><mover accent="true"><mi>F</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">\int_{-\infty}^{\infty} |f(t)|^2 \, dt = \frac{1}{2\pi} \int_{-\infty}^{\infty} |F(j\omega)|^2 \, d\omega = \int_{-\infty}^{\infty} |\hat{F}(f)|^2 \, df</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3846em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3846em;vertical-align:-0.9703em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3846em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span></span></span></span></span><h1 id="连续系统的频率响应H（jω）"><a href="#连续系统的频率响应H（jω）" class="headerlink" title="连续系统的频率响应H（jω）"></a>连续系统的频率响应H（jω）</h1><p>上一章有提到，连续时间 LTI 系统的单位脉冲响应为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> h(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>，由输入信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> f(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 通过系统得到输出信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> y(t) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>，其零状态响应为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>y</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>τ</mi></mrow><annotation encoding="application/x-tex">y_f(t) = \int_{-\infty}^{\infty} f(\tau) h(t - \tau) \, d\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3846em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></span><p>即为卷积形式：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>y</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_f(t) = f(t) * h(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span><p>时域的卷积对应频域的乘积，因此可以定义连续时间 LTI 系统的频率响应为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="script">F</mi><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>ω</mi><mi>t</mi></mrow></msup><mtext> </mtext><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">H(j\omega) = \mathscr{F}[h(t)] = \int_{-\infty}^{\infty} h(t) e^{-j\omega t} \, dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathscr" style="margin-right:0.13634em;">F</span><span class="mopen">[</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3846em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">jω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span></span><p>由此输入F(jω)和输出Y(jω)的关系：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Y</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y(j\omega) = H(j\omega) F(j\omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span></span></span></span></span><p>例题<br><img src="/img/post_illust_img/postBioE/sig02/image-18.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig02/image-19.png" alt="alt text"><br>就这个例题中，实际上这个RC电路构成了一个低通滤波器，其频率响应为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>j</mi><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>j</mi><mi>ω</mi><mi>R</mi><mi>C</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(j\omega) = \frac{1}{1 + j\omega RC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2019em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">jω</span><span class="mord mathnormal" style="margin-right:0.07153em;">RC</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>m</mi><mi>e</mi><mi>g</mi><mi>a</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">omega = 1/RC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.07153em;">RC</span></span></span></span>时，幅度为0.707，把这个频率称为该系统的3dB截止频率或半功率频率，注意0.707是1&#x2F;√2<br>3dB是分贝单位转换得到的，实际是-3dB点<br><strong>关于为什么换算分贝单位时有时乘20有时乘10</strong><br>因为功率和幅度是平方关系<br>记住：<br>功率比 ×10，<br>幅度比 ×20，<br>因为功率 &#x3D; 幅度平方。</p><table><thead><tr><th>比较的对象</th><th>dB 公式</th><th>常见在哪</th></tr></thead><tbody><tr><td>功率</td><td><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>10</mn><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">_</mi><mn>10</mn><mrow><mo fence="true">(</mo><mfrac><mrow><mi>P</mi><mi mathvariant="normal">_</mi><mtext>out</mtext></mrow><mrow><mi>P</mi><mi mathvariant="normal">_</mi><mtext>in</mtext></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">10 \log\_{10} \left( \dfrac{P\_\text{out}}{P\_\text{in}} \right) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.446em;vertical-align:-0.996em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord">10</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3833em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord text"><span class="mord">in</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord text"><span class="mord">out</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.996em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></td><td>通信功率、能量比</td></tr><tr><td>电压、电流、信号幅度</td><td><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>20</mn><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">_</mi><mn>10</mn><mrow><mo fence="true">(</mo><mfrac><mrow><mi>V</mi><mi mathvariant="normal">_</mi><mtext>out</mtext></mrow><mrow><mi>V</mi><mi mathvariant="normal">_</mi><mtext>in</mtext></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">20 \log\_{10} \left( \dfrac{V\_\text{out}}{V\_\text{in}} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.446em;vertical-align:-0.996em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord">10</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3833em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord text"><span class="mord">in</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord text"><span class="mord">out</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.996em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></td><td>滤波器增益、幅频响应、电路电压比</td></tr></tbody></table><p>一个计算应用的例题<br><img src="/img/post_illust_img/postBioE/sig02/image-20.png" alt="alt text"></p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p><img src="/img/post_illust_img/postBioE/sig02/image-21.png" alt="alt text"></p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>实际上这个题和这章节的内容半毛钱关系都没有，反而涉及到数字滤波器，DTFT等内容，我们生医学院真是太厉害辣<br>首先要注意到这是离散的，所以是数字滤波器<br>离散LTI的频率响应定义为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munderover><mi>h</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>ω</mi><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">H(e^{j\omega}) = \sum_{n=-\infty}^{+\infty} h[n] e^{-j\omega n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">jω</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0667em;vertical-align:-1.3083em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7583em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">jωn</span></span></span></span></span></span></span></span></span></span></span></span></span><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex"> h[n] </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> 是系统的单位脉冲响应。<br>这就是DTFT的定义，离散时间傅里叶变换</p><ul><li>在这里，频率响应中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>m</mi><mi>e</mi><mi>g</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">a</span></span></span></span>是离散时间的角频率，单位是弧度&#x2F;采样周期。<br>他的实际含义是“每个采样点的相位增量”（单位 rad&#x2F;sample）<br>所以这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>m</mi><mi>e</mi><mi>g</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">a</span></span></span></span>的计算方式是：</li></ul><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ω</mi><mo>=</mo><mn>2</mn><mi>π</mi><mfrac><mi>f</mi><msub><mi>f</mi><mi>s</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\omega = 2\pi \frac{f}{f_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2519em;vertical-align:-0.8804em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex"> f </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span> 是信号的频率，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex"> f_s </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是采样率<br>这里的f就是我关心的频率，在转换为离散角频率后，会对应输入信号中我关心的频率分量</p><p>题目中说需要20Hz以下的频率分量不受影响，这里只需要计算边界值20Hz即可，因为矩形窗天然是低通滤波器<br>这与后面的Hanning窗、Hamming窗等窗函数的设计思想类似，都是为了在频域上抑制高频成分</p><ul><li>另外，这里的不受影响被定义为幅度变化不超过10%，即幅度变化在0.9到1.1之间<br>但由于正常矩形窗的最大增益为1，所以不可能是超过1.1的情况<ul><li>什么是增益：增益是输出信号幅度与输入信号幅度的比值，通常用分贝（dB）表示。增益为1表示输出信号与输入信号幅度相同，因此在这里增益就是频率响应的幅频特性</li></ul></li></ul><p>计算出边界值后，又应该如何理解这个边界值是最大值还是最小值呢<br>看到我的计算后，不难发现，随着窗宽增大，增益越来越小，只会导致低频的成分更小，可能就不满足题干要求不超过10%的条件了<br>因此，矩形窗的宽度应该是一个最大值，而不是最小值<br><img src="/img/post_illust_img/postBioE/sig02/image-22.jpg" alt="alt text"></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>就是上面提到的，单位冲激串的傅里叶变换<br>要先改写成傅里叶级数，再进行傅里叶变换<br>这是冲激串的自反性，冲激串的傅里叶变换还是冲激串<br>冲激串在这里都是连续的</p><ul><li>另外，为什么遇到冲激串要先傅里叶级数，再傅里叶变换呢<ul><li>首先这么算可以避免无穷级数收敛</li><li>其次在滤波&#x2F;抽样理论中，我们经常需要“在频域里看到冲激阵列”——先做级数展开，使得冲激出现得干干净净，有利于一眼看出抽样、复原、混叠等现象。</li></ul></li></ul><p><img src="/img/post_illust_img/postBioE/sig02/image-23.jpg" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>生物医学电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十五章-细胞衰老与细胞程序性死亡</title>
    <link href="/2025/06/14/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E7%BB%86%E8%83%9E%E8%A1%B0%E8%80%81%E4%B8%8E%E7%BB%86%E8%83%9E%E7%A8%8B%E5%BA%8F%E6%80%A7%E6%AD%BB%E4%BA%A1/"/>
    <url>/2025/06/14/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E7%BB%86%E8%83%9E%E8%A1%B0%E8%80%81%E4%B8%8E%E7%BB%86%E8%83%9E%E7%A8%8B%E5%BA%8F%E6%80%A7%E6%AD%BB%E4%BA%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="细胞衰老"><a href="#细胞衰老" class="headerlink" title="细胞衰老"></a>细胞衰老</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>名词解释：也叫复制衰老，是指体外培养的细胞，经过有限次分裂后，不再具有分裂能力，其形态结构，代谢活动发生显著改变的现象</li><li>Hayflick界限：<br>回忆：细胞不再具有分裂能力时经过的分裂次数<br>标准：细胞在进入增殖停滞状态前的有限倍增次数</li></ul><h2 id="衰老的特征"><a href="#衰老的特征" class="headerlink" title="衰老的特征"></a>衰老的特征</h2><h3 id="形态特征"><a href="#形态特征" class="headerlink" title="形态特征"></a>形态特征</h3><p>细胞变得大而扁平，流动性降低，粘附性增强，内部有脂褐质</p><h3 id="分子特征"><a href="#分子特征" class="headerlink" title="分子特征"></a>分子特征</h3><ol><li>不可逆转的停止分裂(添加生长因子，如有丝分裂原，也无效)</li><li>衰老相关的异染色质集中(SAHF)</li><li>衰老相关的β-半乳糖苷酶活化(SABG)</li><li>端粒长度减少(短于原长度的50%)</li><li>产生衰老特征性分泌物，炎性因子、金属蛋白酶(SASP)</li></ol><h2 id="细胞复制衰老的机制"><a href="#细胞复制衰老的机制" class="headerlink" title="细胞复制衰老的机制"></a>细胞复制衰老的机制</h2><h3 id="Hayflick实验"><a href="#Hayflick实验" class="headerlink" title="Hayflick实验"></a>Hayflick实验</h3><p>混合培养年轻细胞和年老细胞，分裂次数无变化<br><strong>结论</strong></p><ol><li>细胞衰老的过程是由细胞自身决定的，而非环境因素</li><li>细胞核而非细胞质决定了细胞的分裂能力</li></ol><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><ol><li>端粒学说，端粒缩短，细胞分裂停滞</li><li>胁迫诱导的早熟性衰老(SIPS)，超量过氧化物，原癌基因非正常活化，非端粒的DNA损伤，SIPS发生可能引发p16活化，细胞周期停滞</li></ol><h2 id="细胞衰老和个体衰老"><a href="#细胞衰老和个体衰老" class="headerlink" title="细胞衰老和个体衰老"></a>细胞衰老和个体衰老</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>随年龄增加，机体发生退行性变化的过程</p><h3 id="基因和蛋白质水平上的主要标志"><a href="#基因和蛋白质水平上的主要标志" class="headerlink" title="基因和蛋白质水平上的主要标志"></a>基因和蛋白质水平上的主要标志</h3><ol><li>DNA损伤</li><li>端粒长度缩短</li><li>DNA和组蛋白甲基化、乙酰化修饰改变</li><li>细胞内协助蛋白折叠的体系(如分子伴侣)以及降解非正常折叠蛋白质的体系(如泛素-蛋白酶体，自噬体-溶酶体)发生障碍导致错误蛋白的堆积</li></ol><h3 id="在细胞水平上的标志"><a href="#在细胞水平上的标志" class="headerlink" title="在细胞水平上的标志"></a>在细胞水平上的标志</h3><ol><li>失去增殖能力和功能减退的细胞堆积，不能被免疫细胞清除</li><li>衰老细胞的分泌物造成微环境恶化</li><li>成体干细胞衰老，减弱或失去组织更新的能力</li><li>细胞通讯失调，尤其是传递营养信号的信号通路</li><li>线粒体功能障碍，能量代谢障碍</li></ol><h3 id="细胞衰老是个体衰老的根源"><a href="#细胞衰老是个体衰老的根源" class="headerlink" title="细胞衰老是个体衰老的根源"></a>细胞衰老是个体衰老的根源</h3><h1 id="细胞程序性死亡"><a href="#细胞程序性死亡" class="headerlink" title="细胞程序性死亡"></a>细胞程序性死亡</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><ol><li>随机被动性死亡：物理或化学因素导致，如高温使得生物大分子突然发生化学改变引起细胞死亡</li><li>程序性死亡：细胞内在性遗传机制控制的主动性死亡方式，是维持生物体正常生长发育和生命活动的必要条件</li><li>细胞死亡的方式：凋亡，程序性坏死，自噬性细胞死亡</li></ol><h2 id="凋亡的形态学过程"><a href="#凋亡的形态学过程" class="headerlink" title="凋亡的形态学过程"></a>凋亡的形态学过程</h2><h3 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h3><ol><li>细胞表面特化结构如微绒毛消失，细胞间接触消失，但细胞膜保持完整</li><li>核糖体从内质网脱离，内质网囊腔膨胀，与质膜结合</li><li>染色体固缩，沿核膜分布</li></ol><h3 id="凋亡小体形成"><a href="#凋亡小体形成" class="headerlink" title="凋亡小体形成"></a>凋亡小体形成</h3><p>染色质断裂后与其他细胞器被反折的质膜包裹，形成芽状突起，逐渐形成凋亡小体</p><h3 id="凋亡小体被吞噬"><a href="#凋亡小体被吞噬" class="headerlink" title="凋亡小体被吞噬"></a>凋亡小体被吞噬</h3><p>凋亡小体被其他细胞或免疫细胞吞噬后再利用</p><h2 id="凋亡的检测方法"><a href="#凋亡的检测方法" class="headerlink" title="凋亡的检测方法"></a>凋亡的检测方法</h2><ol><li>染色法(形态学观察)：台盼蓝，DAPI</li><li>DNA电泳：凋亡时内切酶活化，DNA切割为180-200bp或其整数倍片段，电泳可检测</li><li>原位末端标记法</li><li>彗星电泳法：完整DNA是彗星头，片段化DNA形成彗星尾<br><img src="/img/post_illust_img/post3/image.jpg" alt="彗星电泳法"></li><li>流式细胞分析：凋亡细胞的DNA低于正常二倍体(G1期细胞)，形成凋亡峰型</li><li>检测细胞膜成分变化：检测磷脂酰丝氨酸外翻(PS,与抗凝血剂Annexin V相互作用)，检测caspase激活，检测Cyt c释放，检测线粒体膜电位变化</li></ol><h2 id="凋亡的生理意义"><a href="#凋亡的生理意义" class="headerlink" title="凋亡的生理意义"></a>凋亡的生理意义</h2><ol><li>保证正常的胚胎发育进程，塑造个体及器官形态，形成免疫耐受<br>NGF（神经生长因子）依赖的神经元凋亡，胚胎发育过程中多余的神经元凋亡<br>指间蹼消失，胚胎发育过程中多余的细胞凋亡<br>对识别自身抗原的淋巴细胞凋亡，形成免疫耐受</li><li>维持生物体内自稳态<br>维持细胞数量平衡，清除衰老细胞和异常细胞</li><li>生理保护，肿瘤监控<br>清除受损细胞，清除病毒感染细胞，清除肿瘤细胞</li></ol><h2 id="凋亡的分子机制"><a href="#凋亡的分子机制" class="headerlink" title="凋亡的分子机制"></a>凋亡的分子机制</h2><p>动物细胞凋亡的阶段</p><ol><li>接受凋亡信号</li><li>凋亡相关分子活化</li><li>凋亡执行</li><li>凋亡细胞清除</li></ol><h3 id="caspase"><a href="#caspase" class="headerlink" title="caspase"></a>caspase</h3><ul><li>结构：半胱氨酸蛋白酶，含有半胱氨酸残基</li><li>性质：特异性切割靶蛋白的天冬氨酸残基</li><li>caspase选择性切割蛋白，切割的结果是使靶蛋白活化或失活，而非完全降解</li><li>caspase通常以无活性酶原形式存在于细胞质</li><li>caspase分类<ul><li>炎症性caspase：caspase-1、-4、-5、-11、-12，参与炎症反应，负责产生有活性的白介素-1</li><li>细胞凋亡caspase：caspase-2、-3、-6、-7、-8、-9、-10，参与细胞凋亡，按照功能分为<ul><li>起始caspase：caspase-2，-8，-9，-10，-11，-12等，激活后切割效应酶前体</li><li>效应caspase：caspase-3，-6，-7等，切割靶蛋白，执行凋亡</li></ul></li><li>caspase家族还参与了细胞自噬，坏死，分化等<br>  <img src="/img/post_illust_img/post3/image-6.png" alt="alt text"></li></ul></li></ul><h3 id="caspase在凋亡中的作用机制"><a href="#caspase在凋亡中的作用机制" class="headerlink" title="caspase在凋亡中的作用机制"></a>caspase在凋亡中的作用机制</h3><ol><li>接受凋亡信号</li><li>酶原分子在特异的天冬氨酸残基上被切割，形成大小两个亚基（caspase自己的天冬氨酸位点）</li><li>两个亚基结合形成异二聚体，此即为活化的caspase<br><img src="/img/post_illust_img/post3/image-7.png" alt="alt text"><br>caspase -2，-8，-9这些是起始caspase，要先被切割天冬氨酸位点聚合形成有活性的caspase，再去切割效应caspase-3，-6，-7</li></ol><h4 id="效应caspase的底物"><a href="#效应caspase的底物" class="headerlink" title="效应caspase的底物"></a>效应caspase的底物</h4><p>有两大类（被活化、被失活）以及细胞骨架蛋白</p><ul><li>被活化：如CAD(凋亡相关的DNase)，切割DNA，导致DNA断裂</li><li>被失活：如PARP(多聚ADP核糖聚合酶)，切割后失活，导致DNA修复障碍</li><li>细胞骨架蛋白：破坏细胞骨架，导致细胞形态改变</li></ul><h4 id="caspase相关的药物治疗途径"><a href="#caspase相关的药物治疗途径" class="headerlink" title="caspase相关的药物治疗途径"></a>caspase相关的药物治疗途径</h4><ul><li>caspase抑制剂：如zVAD-fmk，抑制caspase活性，阻止凋亡，治疗过度凋亡相关疾病，如神经退行性疾病</li><li>caspase激活剂：如Smac&#x2F;DIABLO，促进caspase活性，诱导凋亡，治疗肿瘤</li></ul><h3 id="凋亡信号通路"><a href="#凋亡信号通路" class="headerlink" title="凋亡信号通路"></a>凋亡信号通路</h3><ul><li>死亡受体起始的外源途径<br>Fas受体结合FAS配体(FasL)，形成FAS死亡诱导信号复合物(FADD)，FADD结合caspase-8，形成DISC(死亡诱导信号复合物)，caspase-8被激活，切割caspase-3，-6，-7等效应caspase，同时切割Bid，活化Bax&#x2F;Bak，释放线粒体Cyt c，形成凋亡小体，激活内源凋亡途径</li><li>线粒体起始的内源途径<br>线粒体膜通透性改变，释放Cyt c，Cyt c与Apaf-1结合，再与procaspase-9结合，活化caspase-9，切割caspase-3，-6，-7等效应caspase，引起caspases级联反应<br><img src="/img/post_illust_img/post3/image-8.png" alt="alt text"><br>下面的都是对上述两条途径的补充</li></ul><h4 id="Apaf-1"><a href="#Apaf-1" class="headerlink" title="Apaf-1"></a>Apaf-1</h4><p>线虫中的同源蛋白是CED-4，哺乳动物中的同源蛋白是Apaf-1<br>Apaf-1是凋亡蛋白酶激活因子-1<br>三个结构域</p><ul><li>ced-4结构域，与ATP&#x2F;dATP结合</li><li>CARD结构域，与procaspase-9结合</li><li>C端结构域，与Cyt c结合<br>Apaf-1&#x2F;Cyt c复合体与ATP&#x2F;dATP结合后，Apaf-1就可通过其CARD结构域与procaspase-9结合，活化caspase-9，引起caspases级联反应</li></ul><h4 id="Bcl-2家族"><a href="#Bcl-2家族" class="headerlink" title="Bcl-2家族"></a>Bcl-2家族</h4><p>线虫中的同源蛋白是CED-9，哺乳动物中的同源蛋白是Bcl-2<br>大多定位在线粒体外膜上，或受信号刺激转移到外膜。调控线粒体膜通透性，调节Cyt c释放<br>正常情况下，Bcl-2家族蛋白通过抑制Bax&#x2F;Bak的活性，维持线粒体膜的完整性，防止Cyt c释放<br>Bid激活后，解除Bax&#x2F;Bak的抑制，促进Cyt c释放</p><h4 id="caspase非依赖的凋亡"><a href="#caspase非依赖的凋亡" class="headerlink" title="caspase非依赖的凋亡"></a>caspase非依赖的凋亡</h4><ol><li>凋亡诱导因子AIF</li><li>限制性内切核酸酶G</li></ol><h3 id="细胞凋亡的调控"><a href="#细胞凋亡的调控" class="headerlink" title="细胞凋亡的调控"></a>细胞凋亡的调控</h3><p>细胞接受不到存活信号时，细胞凋亡</p><ul><li>存活信号：如生长因子，细胞因子等<br>有两条途径</li></ul><ol><li>NF-κB转录因子途径：启动Bcl-2基因转录，抑制Bax&#x2F;Bak的活性，维持线粒体膜的完整性</li><li>蛋白激酶PKB途径：活化PKB，磷酸化Bad，Bad失活，使Bcl-2能持续抑制Bax&#x2F;Bak的活性，维持线粒体膜的完整性<br><img src="/img/post_illust_img/post3/image-9.png" alt="alt text"></li></ol><h4 id="肿瘤抑制基因p53"><a href="#肿瘤抑制基因p53" class="headerlink" title="肿瘤抑制基因p53"></a>肿瘤抑制基因p53</h4><p>线粒体获得的促凋亡信号往往来自转录因子p53<br>p53可以阻断细胞周期引发细胞复制衰老，同时p53活化也可以诱导细胞凋亡<br>p53依赖的凋亡机制<br>p53直接解除Bcl-2对Bax&#x2F;Bak的抑制，促进Cyt c释放<br>也可以作为转录因子，激活凋亡正调节因子的表达，抑制凋亡负调节因子的表达</p><h1 id="应试"><a href="#应试" class="headerlink" title="应试"></a>应试</h1><p><img src="/img/post_illust_img/post3/image-2.png" alt="alt text"><br><img src="/img/post_illust_img/post3/image-3.png" alt="alt text"><br><img src="/img/post_illust_img/post3/image-4.png" alt="alt text"><br><img src="/img/post_illust_img/post3/image-5.png" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>细胞生物学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DS]P1数据结构基础</title>
    <link href="/2025/06/13/DS-P1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/13/DS-P1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="煮波坠机了，得去准备期末了-还没写完"><a href="#煮波坠机了，得去准备期末了-还没写完" class="headerlink" title="煮波坠机了，得去准备期末了(还没写完)"></a>煮波坠机了，得去准备期末了(还没写完)</h2><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p><img src="/img/post_illust_img/postDS/post1/image-1.jpg" alt="公式"><br><img src="/img/post_illust_img/postDS/post1/image-2.jpg" alt="公式"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">例：求n!<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>;<br>main( )<br>&#123;<br><span class="hljs-built_in">printf</span>(“<span class="hljs-number">3</span>!=%d, <span class="hljs-number">5</span>!=%d\n”, fact(<span class="hljs-number">3</span>), fact(<span class="hljs-number">5</span>));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-keyword">if</span>( n &lt;= <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> ( <span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> ( n * fact(n<span class="hljs-number">-1</span>));<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> f ;<br><span class="hljs-keyword">for</span>(f=<span class="hljs-number">1</span>; n&gt;<span class="hljs-number">0</span>;  n--)<br>f *= n;<br>    <span class="hljs-keyword">return</span> ( f);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="在C里面的数组初始化方法"><a href="#在C里面的数组初始化方法" class="headerlink" title="在C里面的数组初始化方法"></a>在C里面的数组初始化方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> sales[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">12.25</span>, <span class="hljs-number">32.50</span>, <span class="hljs-number">16.90</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45.68</span>&#125;;<br><span class="hljs-type">double</span> sales[ ] = &#123;<span class="hljs-number">12.25</span>, <span class="hljs-number">32.50</span>, <span class="hljs-number">16.90</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45.68</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span> &#125;; <span class="hljs-comment">//相当于：  int list[5] = &#123;6,5,12,0,0&#125;;</span><br><span class="hljs-type">int</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//最常用的初始化数据组元素为0的方式 </span><br><span class="hljs-type">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">10</span>] = “hello”;<br><span class="hljs-type">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">10</span>] = &#123;‘h’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\<span class="hljs-number">0</span>’&#125;;<br><span class="hljs-type">char</span> <span class="hljs-built_in">string</span>[ ] = “hello”;<br><br></code></pre></td></tr></table></figure><p>C的数组是一个更加高级的数据类型，数组的元素是同类型变量，在内存地址上是连续的。数组的元素可以通过下标访问，数组的下标从0开始，0为首元素，同时，数组名相当于一个指针，指向的是数组的首元素。</p><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><p>传递数组作为函数参数时，实际上是传递数组的首地址。函数内部可以通过指针操作数组元素。<br>并且形参数组和实参数组是一对共享同一数据区的数组，他们就是同一个数组，而不是拷贝，因此在函数中对数组进行修改会影响到原数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*非字符数组作为参数时，函数的定义形式</span><br><span class="hljs-comment">  数组长度可省略:int array[]和int array[10]都是合法的，但传入10毫无意义，因为传入的是首地址，所以对于非字符数组还要传入int size参数来表示数组的长度。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">( <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[ ], <span class="hljs-type">int</span> size)</span><br>&#123;…&#125;<br><br><br><span class="hljs-comment">//数组作为参数时，函数的调用形式：</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];<br>    …<br>    <span class="hljs-comment">//a已经退化为指针，函数传入实参时传入的是首地址，不用加上&amp;符号</span><br>    fun(a, <span class="hljs-number">10</span>);<br>    …<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> mes[ ] = “C Language”;<br><span class="hljs-type">char</span> line[<span class="hljs-number">100</span>] = “Programming”;<br></code></pre></td></tr></table></figure><ul><li>数组元素跟一般变量一样可赋值、比较、计算等。</li><li>数组下标也是从0 ~ N-1（N为数组长度）。</li><li>字符数组长度可以显式给出，也可以隐式得到。</li><li>由双引号括起来的的字符串常量具有静态字符串数组类型。</li><li>用字符串常量对数组初始化时，编译程序以\0作为结束这个数组。因此,用字符数组来存放字符串时，数组长度要比字符串长度多1。</li></ul><h2 id="问题1-数字字符串转换成整数"><a href="#问题1-数字字符串转换成整数" class="headerlink" title="问题1 数字字符串转换成整数"></a>问题1 数字字符串转换成整数</h2><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//str2int.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">str2int</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;  <span class="hljs-comment">//提前声明函数，再写main函数</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s);<br>    <span class="hljs-type">int</span> result = str2int(s);<br>    <span class="hljs-type">int</span> test = result + <span class="hljs-number">10</span>;     <span class="hljs-comment">//一个简单测试</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,test);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">str2int</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i,sign,n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;s[i]==<span class="hljs-string">&#x27; &#x27;</span>||s[i]==<span class="hljs-string">&#x27;\n&#x27;</span>||s[i]==<span class="hljs-string">&#x27;\t&#x27;</span>;i++)      <span class="hljs-comment">//循环跳过所有空格换行制表，执行空语句;</span><br>    ;<br>    sign = <span class="hljs-number">1</span>;       <span class="hljs-comment">//符号确定</span><br>    <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;+&#x27;</span>||s[i]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>        sign = (s[i++]==<span class="hljs-string">&#x27;+&#x27;</span>)?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>;      <span class="hljs-comment">//三元运算符，a = (条件判断)?a1:a2;     条件为真赋值a1,反之a2   结束后i++到下一个数字</span><br>    <br>    <span class="hljs-keyword">for</span> (n=<span class="hljs-number">0</span>;s[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;i++) <span class="hljs-comment">//保证指针指向数字字符，背后是ASCII码</span><br>        n = n*<span class="hljs-number">10</span> +s[i] -<span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-comment">//核心，递归，在note有图说明，另外重点在于-&#x27;0&#x27;，实质是ASCII码相减</span><br>    <span class="hljs-keyword">return</span> (sign*n);    <span class="hljs-comment">//定义符号</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>核心代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (n=<span class="hljs-number">0</span>;s[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;i++) <span class="hljs-comment">//保证指针指向数字字符，背后是ASCII码</span><br>    n = n*<span class="hljs-number">10</span> +s[i] -<span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-comment">//核心，递归，在note有图说明，另外重点在于-&#x27;0&#x27;，实质是ASCII码相减</span><br><br></code></pre></td></tr></table></figure><p>图示<br><img src="/img/post_illust_img/postDS/post1/image-3.jpg" alt="图示"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; s[i]为数字字符; i++)<br>        n = <span class="hljs-number">10</span>*n + s[i] – ‘<span class="hljs-number">0</span>’;<br><br></code></pre></td></tr></table></figure><h2 id="问题2-将字符串颠倒"><a href="#问题2-将字符串颠倒" class="headerlink" title="问题2 将字符串颠倒"></a>问题2 将字符串颠倒</h2><p><strong>for循环和while循环</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//for循环更紧凑，初始化，变量更新全部写在for循环头部，适合已知循环次数的情况</span><br><span class="hljs-keyword">for</span> (initialization; condition; increment/decrement)<br>&#123;<br>    <span class="hljs-comment">// loop body</span><br>&#125;<br><br><span class="hljs-comment">//while循环更灵活，初始化在循环外，变量更新在循环内，适合未知循环次数的情况</span><br>initialization;<br><span class="hljs-keyword">while</span> (condition)<br>&#123;<br>    <span class="hljs-comment">// loop body</span><br>    increment/decrement;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//reverse.c</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> j)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s);<br>    <span class="hljs-type">int</span> j = <span class="hljs-built_in">strlen</span>(s);<br>    reverse(s,j);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%s\n&quot;</span>,s);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    i++;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>;     <span class="hljs-comment">//注意减1，才是\0之前的字符</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> j)</span><br>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;j;k++,j--)<br>    &#123;<br>        c=s[k];<br>        s[k]=s[j];<br>        s[j]=c;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p><strong>核心代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//查询字符串长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    i++;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>;      <span class="hljs-comment">//注意减1，才是\0之前的字符</span><br>&#125;<br><br><span class="hljs-comment">//颠倒字符串</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> j)</span><br>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;j;k++,j--)    <span class="hljs-comment">//一边加一遍减，两边对换，往内移动，01234--&gt;41230--&gt;43210,</span><br>    &#123;<br>        c=s[k];<br>        s[k]=s[j];<br>        s[j]=c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外注意，字符串的结束符是’\0’，因此在计算字符串长度时要减1。</p><h2 id="问题3-整数转换成字符串"><a href="#问题3-整数转换成字符串" class="headerlink" title="问题3 整数转换成字符串"></a>问题3 整数转换成字符串</h2><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//int2str.c</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">deprecated，感觉自己写不出来</span><br><span class="hljs-comment">缺少判断条件</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># include &lt;stdio.h&gt;</span><br><span class="hljs-comment"># include &lt;stdlib.h&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int convert(int a);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int main()</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    int a;</span><br><span class="hljs-comment">    scanf(&quot;%d&quot;,&amp;a);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    char s[20] = convert(a);</span><br><span class="hljs-comment">    printf(&quot;%s&quot;,s);</span><br><span class="hljs-comment">    system(&quot;pause&quot;);</span><br><span class="hljs-comment">    return 0;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int convert(int a)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    int i=0;</span><br><span class="hljs-comment">    char j[20];</span><br><span class="hljs-comment">    while (j[i]);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//示例复刻</span><br><span class="hljs-comment">//示例需要从低位开始提取，最后加上\0再反转字符串</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">i2s</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    i2s(s,n);<br>    reverse(s);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">i2s</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i,sign;<br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>((sign=n)&lt;<span class="hljs-number">0</span>)      <span class="hljs-comment">//一举两得，还能保护sign</span><br>    &#123;<br>        n=-n;           <span class="hljs-comment">//负变正</span><br>    &#125;<br><br>    <span class="hljs-keyword">do</span>&#123;<br>        s[i++] = n%<span class="hljs-number">10</span> +<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125; <span class="hljs-comment">//while (n/=10 &gt; 0);死循环--&gt;(n/=(10&gt;0))--&gt;(n/=1)    //do while先执行再判断，&gt;先执行再/=</span><br>        <span class="hljs-keyword">while</span> ((n/=<span class="hljs-number">10</span>)&gt;<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (sign&lt;<span class="hljs-number">0</span>)<br>    s[i++]=<span class="hljs-string">&#x27;-&#x27;</span>;<br>    s[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> c,i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,j=<span class="hljs-built_in">strlen</span>(s);i&lt;j;i++,j--)<br>    &#123;<br>        c = s[i];<br>        s[i]=s[j];<br>        s[j]=c;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    i++;<br>    <span class="hljs-keyword">return</span> i<span class="hljs-number">-1</span>;<br>    <br>&#125;<br><br><br><span class="hljs-comment">//321-\0 --&gt;-123</span><br><span class="hljs-comment">//2134-\0 --&gt;-1342--&gt;-4312</span><br><span class="hljs-comment">//负数也绝对适用</span><br><span class="hljs-comment">//核心就是三行互换</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int c,i,j;</span><br><span class="hljs-comment">for(i=0,j=strlen(s);i&lt;j;i++,j--)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">c = s[i];</span><br><span class="hljs-comment">s[i]=s[j];</span><br><span class="hljs-comment">s[j]=c;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>从低位到高位转换整数到字符串，注意要先将整数转换成正数，然后再将每一位数字转换成字符，然后存入数组，再加符号，加\0，再通过reverse函数颠倒字符串</p><h2 id="常用标准字符串库函数"><a href="#常用标准字符串库函数" class="headerlink" title="常用标准字符串库函数"></a>常用标准字符串库函数</h2><p>前面费心写了不少字符串处理函数，其实这些库已经存放在一些库里面了，C语言提供了很多标准字符串库函数，可以直接使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> - 字符串处理函数</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;       <span class="hljs-comment">/*计算字符串长度, 字符串以\0结果*/</span><br>  <span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span>; <span class="hljs-comment">/*将字符串t拷贝到字符串s中*/</span><br>  <span class="hljs-type">char</span> *<span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span>; <span class="hljs-comment">/*将字符串t拷贝到字符串s尾部*/</span> <br>  <span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span>;   <span class="hljs-comment">/*比较两个字符串,找第一个不相等的字符，若s&gt;t,则返回大于0的数;若s&lt;t,则返回小于0的数;若相等, 返回0 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> - 实用函数</span><br>  <span class="hljs-type">int</span>   <span class="hljs-title function_">atoi</span><span class="hljs-params">(<span class="hljs-type">char</span>  s[ ])</span>; <span class="hljs-comment">/* 将字符串转换成相应整数 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> - 输入/输出函数</span><br>  getchar()/<span class="hljs-built_in">putchar</span>(c) <span class="hljs-comment">/*按字符输入输出 */</span><br>  <span class="hljs-built_in">scanf</span>(“%s…)<span class="hljs-comment">/*输入由非空字符组成的串*/</span><br>  <span class="hljs-built_in">printf</span>(“%s…)<span class="hljs-comment">/*输出由‘\0’结束的串*/</span><br>  gets(<span class="hljs-type">char</span> s[])<span class="hljs-comment">/*输入由回车结束的串，回车本身不读入,不建议使用*/</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-type">char</span> s[])<span class="hljs-comment">/*输出由‘\0’结束的串，自动加回车*/</span><br><br><br></code></pre></td></tr></table></figure><h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><p>使用stdio.h头文件<br>FILE *fp; &#x2F;&#x2F;文件指针<br>NULL &#x2F;&#x2F;空指针<br>EOF &#x2F;&#x2F;文件结束符，表示结束或错误</p><h3 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>FILE *in,*out;  <span class="hljs-comment">//定义文件指针，也有FILE，但基本不用</span><br>in = fopen(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-comment">//打开文件input.txt，读模式</span><br>out = fopen(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>); <span class="hljs-comment">//打开文件output.txt，写模式</span><br><span class="hljs-keyword">if</span> (in == <span class="hljs-literal">NULL</span> || out == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error opening file.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 错误处理</span><br>&#125;<br><span class="hljs-type">int</span> c;  <span class="hljs-comment">//循环读取input.txt并拷贝</span><br><span class="hljs-keyword">while</span>(c = fgetc(in) != EOF) &#123; <span class="hljs-comment">//从文件中读入字符，直到文件结束</span><br>    fputc(c, out); <span class="hljs-comment">//输出字符到文件</span><br>&#125;<br><br><span class="hljs-type">char</span> s[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">(s,<span class="hljs-number">10</span>,in)</span>; <span class="hljs-comment">//常用读取，安全</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">(s,out)</span>; <span class="hljs-comment">//常用输出字符串到文件</span><br><br>fclose(in); <span class="hljs-comment">//关闭文件input.txt</span><br>fclose(out); <span class="hljs-comment">//关闭文件output.txt</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="是的你可以查字典"><a href="#是的你可以查字典" class="headerlink" title="是的你可以查字典"></a>是的你可以查字典</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">c =fgetc(in);  <span class="hljs-comment">//从文件（input.txt）中读入一个字符</span><br>fputc(c,out); <span class="hljs-comment">//输出一个字符到文件（output.txt）中</span><br>fgets(s,  n,  in); <span class="hljs-comment">//从 文件in上读入一行（最多读入n-1个字符），放入s 字符数组中。返回s或NULL。</span><br> <span class="hljs-built_in">fputs</span>( s,  out); <span class="hljs-comment">//把字符串s（不一定含\n）写入文件out中。返回非负数或EOF</span><br><span class="hljs-built_in">fscanf</span>(in, “%d”, &amp;score); <span class="hljs-comment">//从文件in中读入一个整数,存入score</span><br><span class="hljs-built_in">fprintf</span>( out, “%d\n”, score); <span class="hljs-comment">//输出一个整数到文件out中</span><br>fclose(fp); <span class="hljs-comment">//关闭文件，释放资源</span><br></code></pre></td></tr></table></figure><h3 id="关于fgets"><a href="#关于fgets" class="headerlink" title="关于fgets()"></a>关于fgets()</h3><p>函数声明<br><code>char *fgets(char *s,int n,FILE *);</code><br>可以知道返回值是一个指向字符数组的指针，或者是NULL<br>有几点需要注意：</p><ol><li>支持函数嵌套<br>puts(fgets(s,n,file)); &#x2F;&#x2F;可以直接输出读取的字符串</li><li>可使用返回值判断读取成功与否</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>((fp = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)&#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can&#x27;t open file %s!\n&quot;</span>, filename);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//表示程序异常结束</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>fgets在读取时会使用file中的文件位置指针，这并不是一个指针，而是一个整数，维护在FILE*结构体内部，它表示文件中的位置，类似于光标。每次读取后，文件位置指针会自动向后移动。因此如果需要多次读取同一行，需要使用rewind函数将文件位置指针重置到文件开头。如果需要精准控制读取位置，可以使用fseek函数。</li><li>fgets会读取换行符，但不会自动添加换行符，因此输出时需要手动添加。</li></ol><h2 id="问题4-文本查找"><a href="#问题4-文本查找" class="headerlink" title="问题4 文本查找"></a>问题4 文本查找</h2><p>使用scanf读取文件名和要查找的串，<br>使用fgets函数读取文件，fgets(s,n,in)<br>因此需要三个字符串<br>char filename[32],str[81], line[1024];<br>（一个文件名长度通常不超过32个字符（test.txt）；屏幕上一行通常显示80个字符；而1024是一般文件的最大物理行长度。当然这些取决于具体系统实现。）</p><h3 id="朴素字符串查找算法"><a href="#朴素字符串查找算法" class="headerlink" title="朴素字符串查找算法"></a>朴素字符串查找算法</h3><p>核心思想是通过fgets读取文件，再定义index函数查找串</p><p><strong>index函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">char</span> t[])</span><br>&#123;<br>  <span class="hljs-type">int</span> i, j, k;<br>  <span class="hljs-comment">//在s中查找t</span><br>  <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>  &#123;<br>    <span class="hljs-keyword">for</span>(j=i,k=<span class="hljs-number">0</span>;t[k]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;s[j]==t[k];j++,k++)<br>    ; <br>    <span class="hljs-comment">//空语句循环，循环条件判断s[j]和t[k]，直到找到目标字段，并返回目标字段的位数k</span><br>    <span class="hljs-keyword">if</span> (t[k]==<span class="hljs-string">&#x27;\0&#x27;</span>) <span class="hljs-comment">//如果t[k]是&#x27;\0&#x27;，说明找到了目标字段</span><br>      <span class="hljs-keyword">return</span> i; <span class="hljs-comment">//返回目标字段在s中的起始位置</span><br>    <br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">//没有找到目标字段或者已经查找完毕，返回-1，while循环结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一些关于字符串数组的补充</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">//定义一个字符数组s，长度为100</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s); <span class="hljs-comment">//读取一个字符串到s中，注意不能写成&amp;s</span><br><span class="hljs-type">char</span> *p = <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">//定义一个字符串指针p，指向字符串&quot;abc&quot;，只读</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, p); <span class="hljs-comment">//输出字符串p，注意不能写成&amp;p</span><br><span class="hljs-comment">//p[0] = &#x27;d&#x27;; //错误，不能修改字符串字面量</span><br><span class="hljs-comment">//p = &quot;def&quot;; //正确，指针可以指向新的字符串字面量</span><br></code></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//textfind.c</span><br><span class="hljs-comment">//注意需要管理员权限</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><span class="hljs-comment">//读取文件，读取文件名，查找</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">char</span> t[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> filename[<span class="hljs-number">64</span>],str[<span class="hljs-number">81</span>],line[MAXLINE];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,filename);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str);<br>    FILE *in,*out;<br>    in = fopen(filename,<span class="hljs-string">&quot;r&quot;</span>);<br>    out = fopen(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(in == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can&#x27;t open the input file&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>        <span class="hljs-keyword">if</span>(out == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can&#x27;t open the output file&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(fgets(line,MAXLINE<span class="hljs-number">-1</span>,in)!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(index(line,str)&gt;=<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,line);<br>            <span class="hljs-built_in">fputs</span>(line,out);<br>        &#125;<br>    &#125;<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">char</span> t[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,k;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=i,k=<span class="hljs-number">0</span>;t[k]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;s[j]==t[k];j++,k++)<br>        ;<br>        <span class="hljs-keyword">if</span> (t[k]==<span class="hljs-string">&#x27;\0&#x27;</span>)<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题4-思考1-大小写"><a href="#问题4-思考1-大小写" class="headerlink" title="问题4 思考1 大小写"></a>问题4 思考1 大小写</h2><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>tolower和toupper函数已经包含在&lt;ctype.h&gt;头文件中，可以直接使用。<br>但是可以自行写一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//ASCII码，大写在前，小写在后，中间有几位标点符号，不是直接接上的</span><br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">char</span>  <span class="hljs-title function_">tolower</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span><br>&#123;<br><span class="hljs-keyword">if</span>( c &gt;=‘A’ &amp;&amp; c&lt;=‘Z’)<br><span class="hljs-keyword">return</span> ‘a’ – ‘A’ + c;<br><span class="hljs-keyword">return</span> c;<br>&#125; <br><span class="hljs-comment">//方法二，宏函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tolower(c) (c&gt;=‘A’&amp;&amp;c&lt;=‘Z’?‘a’-’A’+ c : c)</span><br><span class="hljs-comment">//宏函数是替换参数，所以用?条件运算符</span><br></code></pre></td></tr></table></figure><h3 id="其他ctype-h函数"><a href="#其他ctype-h函数" class="headerlink" title="其他ctype.h函数"></a>其他ctype.h函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-type">int</span>  <span class="hljs-title function_">isalpha</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>是否是字母<br><span class="hljs-type">int</span>  <span class="hljs-title function_">isdigit</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>是否是数字<br><span class="hljs-type">int</span>  <span class="hljs-title function_">islower</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>是否是小写字母<br><span class="hljs-type">int</span>  <span class="hljs-title function_">isupper</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>是否是大写字母<br><span class="hljs-type">int</span>  <span class="hljs-title function_">isspace</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>是否是空白字符<br><span class="hljs-type">int</span>  <span class="hljs-title function_">tolower</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>将大写字母为小写字母<br><span class="hljs-type">int</span>  <span class="hljs-title function_">toupper</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>将小写字母为大写字母<br></code></pre></td></tr></table></figure><p><strong>为什么返回值都是int</strong><br>因为字符在C语言中是以ASCII码的形式存储的，而ASCII码是一个整数，因此ctype.h中的函数返回值都是int类型。这样可以确保函数能够处理所有可能的字符，包括非字母和非数字字符。</p><h2 id="问题4-思考2-高级查找功能"><a href="#问题4-思考2-高级查找功能" class="headerlink" title="问题4 思考2 高级查找功能"></a>问题4 思考2 高级查找功能</h2><ul><li>问题4.1中index只能查找的是子字符串的首次出现。请考虑如何查找子字符串的最后一次出现？</li><li>如果要查找一个字符串在一个文件中的所有出现（如给出所有出现的行列位置），如何实现？（注意，index只能查找子字符串首次出现，如果一行中含有多个要查找的字符串怎么办？）(类似Office软件中的查找功能)</li><li>在一个文件中查找给定串并用另一个替换串，如何实现？ (Office软件中的替换功能)</li><li>如何实现模糊查找（如UNIX命令grep），如要查找的串形式为：comp?ter, com*er (?单字符匹配，*多字符匹配）</li></ul><p><strong>暂时跳过</strong></p><h2 id="问题4-思考3-另一种查找方法"><a href="#问题4-思考3-另一种查找方法" class="headerlink" title="问题4 思考3 另一种查找方法"></a>问题4 思考3 另一种查找方法</h2><p>前面的算法时间复杂度是O(n*m)，其中n为文本长度，m为模式串长度。可以考虑使用KMP算法，时间复杂度为O(n+m)，将在后续学习中介绍。<br><strong>另一种只需要一层循环的查找方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=<span class="hljs-number">0</span>; <span class="hljs-comment">//设置查找的起始位置</span><br>    <span class="hljs-keyword">while</span>(s[i] != ‘\<span class="hljs-number">0</span>’ &amp;&amp; t[j] != ‘\<span class="hljs-number">0</span>’) &#123;<br>        <span class="hljs-keyword">if</span>(s[i] == t[j]) &#123;<span class="hljs-comment">//若字符相等，继续查找下一个字符</span><br>            i++; j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//若字符不等，则s中退回到上次查找开始的下一个位置</span><br>            i = i-j+<span class="hljs-number">1</span>;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t[j] == ‘\<span class="hljs-number">0</span>’)<span class="hljs-comment">//查找到字符串t，返回t在s中的起始位置</span><br>        <span class="hljs-keyword">return</span> i-j;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>并不是说原本那个两层循环不好，那个两层循环算法更简单，可读性更好</p><h2 id="问题5-计算小岛面积"><a href="#问题5-计算小岛面积" class="headerlink" title="问题5 计算小岛面积"></a>问题5 计算小岛面积</h2><hr><p><strong>【问题描述】</strong></p><p>用一个二维方阵（最小为 3×3，最大为 50×50）表示一片海域。方阵中的元素只由 <code>0</code> 和 <code>1</code> 组成，其中 <code>1</code> 表示海岸线。你需要计算由海岸线围起来的<strong>小岛面积</strong>，也就是：<strong>被 <code>1</code> 完全围起来的区域中 <code>0</code> 的个数</strong>。</p><p>如下图所示，8×8 的方阵所表示的小岛面积为 <code>9</code>：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>上述方阵表示的海域满足以下两个条件：</p><ol><li>小岛只有一个；</li><li>用 <code>1</code> 表示的海岸线是封闭的（可以是凸的，也可以是凹的）。</li></ol><hr><p><strong>【输入形式】</strong></p><ul><li>第一行输入一个整数 <code>n</code>（表示方阵的阶数，满足 3 ≤ n ≤ 50）；</li><li>接下来的 <code>n</code> 行，每行输入 <code>n</code> 个 <code>0</code> 或 <code>1</code>，用空格隔开。</li></ul><hr><p><strong>【输出形式】</strong></p><ul><li>输出一个整数，表示被海岸线封闭起来的 <code>0</code> 的个数（即小岛面积）。</li></ul><hr><p><strong>【输入样例】</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><hr><p><strong>【输出样例】</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><h3 id="二维（多维）数组"><a href="#二维（多维）数组" class="headerlink" title="二维（多维）数组"></a>二维（多维）数组</h3><p>在C语言中，二维数组可以看作是一个元素为另一个一维数组的一维数组<br>如<code>float y[4][3];</code><br><strong>初始化</strong><br>多维数组的初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> y[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//所有元素初始化为0</span><br><br><span class="hljs-type">int</span> y[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = &#123;<br>&#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span> &#125;,<br>&#123; <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span> &#125;,<br>&#123; <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span> &#125;,<br>&#125;<br><span class="hljs-type">int</span> y[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span> &#125;; <br><span class="hljs-comment">//也同上，因为在C语言中，数组元素按行存贮。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1 3 5</span><br><span class="hljs-comment">2 4 6</span><br><span class="hljs-comment">3 5 7</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-type">int</span>  y[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = &#123;<br>&#123;<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>&#125;<br>&#125;<br><span class="hljs-type">int</span> y[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;; <span class="hljs-comment">//同上，其他元素为0</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1 0 0</span><br><span class="hljs-comment">2 0 0</span><br><span class="hljs-comment">3 0 0</span><br><span class="hljs-comment">4 0 0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>仅仅是重写用例，仅用于搞清楚逻辑，算法过于暴力，优化空间巨大</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> s[n][n];<br>    <span class="hljs-type">int</span> a[n*n];<br>    <span class="hljs-type">int</span> i,j,k;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i][j]);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            &#123;<br>                <span class="hljs-type">int</span> c =<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>(s[i][j]==<span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-comment">//往右</span><br>                        <span class="hljs-keyword">for</span> (k=i;k&lt;n;k++)<br>                        <span class="hljs-keyword">if</span>(s[k][j]==<span class="hljs-number">1</span>)<br>                        &#123;<br>                            c++;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-comment">//往左</span><br>                        <span class="hljs-keyword">for</span>(k=i;k&gt;=<span class="hljs-number">0</span>;k--)<br>                        <span class="hljs-keyword">if</span>(s[k][j]==<span class="hljs-number">1</span>)<br>                        &#123;<br>                            c++;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-comment">//往上</span><br>                        <span class="hljs-keyword">for</span>(k=j;k&gt;=<span class="hljs-number">0</span>;k--)<br>                        <span class="hljs-keyword">if</span>(s[i][k]==<span class="hljs-number">1</span>)<br>                        &#123;<br>                            c++;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-comment">//往下</span><br>                        <span class="hljs-keyword">for</span>(k=j;k&lt;n;k++)<br>                        <span class="hljs-keyword">if</span>(s[i][k]==<span class="hljs-number">1</span>)<br>                        &#123;<br>                            c++;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                <span class="hljs-keyword">if</span>(c==<span class="hljs-number">4</span>)<br>                &#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PPT上似乎没有讨论优化（？），有空再说吧</strong></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="定义和一些常见的指针"><a href="#定义和一些常见的指针" class="headerlink" title="定义和一些常见的指针"></a>定义和一些常见的指针</h2><p>指针变量的定义（说明）：<br>&lt;类型&gt;  *&lt;变量&gt;；<br>指针是用所指对象类型来表征的。如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>  *px;    <span class="hljs-comment">/* 指向整型的指针 */</span><br><span class="hljs-type">char</span> *pc;<span class="hljs-comment">/* 指向字符型的指针 */</span><br><span class="hljs-type">char</span> *acp[<span class="hljs-number">10</span>];  <span class="hljs-comment">/* 指向字符型的指针构成的数组，指针数组 */</span><br><span class="hljs-type">char</span> (*pac)[<span class="hljs-number">10</span>];    <span class="hljs-comment">/* 指向字符型数组的指针，数组指针 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">( )</span>;    <span class="hljs-comment">/* 返回值为整型的函数 */</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">fpi</span><span class="hljs-params">( )</span>;    <span class="hljs-comment">/* 返回值为指向整型的指针的函数，指针函数 */</span><br><span class="hljs-type">int</span> (*pfi)();    <span class="hljs-comment">/*指向一个返回值为整型的函数的指针，函数指针*/</span><br></code></pre></td></tr></table></figure><h2 id="指针与地址"><a href="#指针与地址" class="headerlink" title="指针与地址"></a>指针与地址</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>‘&amp;’：取地址</li><li>‘*’：间接引用&#x2F;抵引用，在指针定义时使用，表示指针指向的变量类型；在指针使用时，表示访问指针所指向的变量的值。</li></ul><p><strong>eg1</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>  i = <span class="hljs-number">10</span>, y=<span class="hljs-number">20</span>, *pi;<br>pi = &amp;i;  <span class="hljs-comment">/*将变量i的地址赋给指针变量pi，称pi指向i; */</span><br>y = *pi; <span class="hljs-comment">/*取pi所指对象的值赋给y，即取pi中所存地址中的内容*/</span><br>pi = &amp;y;  <span class="hljs-comment">/*将变量y的地址赋给指针变量pi，称pi指向y; */</span><br></code></pre></td></tr></table></figure><p><strong>eg2</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">100</span>, y;<br><span class="hljs-type">int</span> *px;<br>px = &amp;x;  <span class="hljs-comment">//将x的地址赋给px，px指向x</span><br><span class="hljs-comment">//之后凡是对x的引用，都可以用*px来代替</span><br>y = *px;  <span class="hljs-comment">//将px所指向的变量x的值赋给y</span><br></code></pre></td></tr></table></figure><p><strong>注意使用任何指针变量之前必须先给它赋一个所指合法具体对象的地址值</strong><br>也就是说要先让指针指向一个合法的内存地址，否则会导致未定义行为（如访问非法内存地址）<br><strong>定义任何变量时，都是在内存上开辟一块空间，指针也是一样，只不过指针存储的是一个地址值，而不是具体的值。</strong><br>你可以让指针指向一个已经定义好的变量的地址，或者让指针指向一个动态分配的内存空间（如使用malloc函数），但不能让指针指向一个未定义的变量或未分配的内存空间。</p><p><strong>错误例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> *px;<br>*px = x;<br><span class="hljs-comment">//缺少px = &amp;x;  //先将x的地址赋给px</span><br><br><br><span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-built_in">string</span>);<br><span class="hljs-built_in">strcpy</span>(<span class="hljs-built_in">string</span>, <span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-comment">//缺少string = malloc(100);  //先分配内存空间</span><br></code></pre></td></tr></table></figure><h3 id="指针的地址"><a href="#指针的地址" class="headerlink" title="指针的地址"></a>指针的地址</h3><p>如何让指针指向一个具体对象，下面是三种方法</p><ol><li>运算符&amp;直接取已经存在的地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>,*p;<br>px = &amp;n; <span class="hljs-comment">//将n的地址赋给指针p</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将另一个同类型指针的地址赋给当前指针，两个指针会指向同一个地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>,*p1,*p2<br><span class="hljs-type">char</span> s[<span class="hljs-number">10</span>], *p3;<br>p1 = &amp;n; <span class="hljs-comment">//将n的地址赋给指针p1</span><br>p2 = p1; <span class="hljs-comment">//将p1的地址赋给指针p2，p2也指向n</span><br>p3 = s; <span class="hljs-comment">//将s的地址赋给指针p3，p3指向s的首元素</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用动态内存分配函数（如malloc）分配一块内存空间，并将其地址赋给指针</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(s)+<span class="hljs-number">1</span>); <span class="hljs-comment">//分配一块内存空间，大小为s的长度加1（包括&#x27;\0&#x27;），并将其地址赋给指针p</span><br></code></pre></td></tr></table></figure><h3 id="关于malloc函数"><a href="#关于malloc函数" class="headerlink" title="关于malloc函数"></a>关于malloc函数</h3><p>为指针动态申请一块内存空间，返回值是一个指向这块内存空间的指针。</p><ol><li>函数声明</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-comment">//size_t表示无符号整数类型（相当于unsigned int），表示要分配的内存大小（以字节为单位）。</span><br><span class="hljs-comment">//size是一个整数，表示要分配的内存大小,以字节为单位。</span><br><span class="hljs-comment">//注意：malloc函数返回的是一个void指针，需要强制类型转换为具体的指针类型，如(char*)或(int*)等。</span><br></code></pre></td></tr></table></figure><ol start="2"><li>用例</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> p[<span class="hljs-number">10</span>]; <br><span class="hljs-type">char</span> *s;<br><span class="hljs-type">int</span> *intptr;<br>s = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>); <span class="hljs-comment">//分配32字节的内存空间，返回值是一个指向这块内存空间的指针</span><br>s = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(p)+<span class="hljs-number">1</span>); <span class="hljs-comment">//分配p的长度加1字节的内存空间，正好能存放p的内容和&#x27;\0&#x27;结束符</span><br>intptr = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//分配10个int类型的内存空间，一个int类型通常是4字节，因此总共分配40字节的内存空间</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">sizeof运算符：返回一个对象或类型所占的字节数</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol start="3"><li>free函数<br>使用malloc函数分配的内存空间需要使用free函数释放，否则会造成内存泄漏。<br>如上例</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">free</span>(s); <span class="hljs-comment">//释放s指向的内存空间</span><br><span class="hljs-built_in">free</span>(intptr); <span class="hljs-comment">//释放intptr指向的内存空间</span><br></code></pre></td></tr></table></figure><ol start="4"><li>free和malloc都定义在&lt;stdlib.h&gt;头文件中</li></ol><p><strong>一定要记住malloc完了要free</strong></p><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><ol><li>指针可以和整数进行加减运算<br>若p为指针，则p+n和p-n是合法的，同样p++也是合法的，它们的结果同指针所指对象类型相关。如果p是指向数组某一元素的指针，则p+1及p++为数组下一元素的指针</li><li>p1和p2同一类型时，可以赋值</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a =<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p1, *p2;<br>p1 = &amp;a; <span class="hljs-comment">//将a的地址赋给p1</span><br>p2 = p1; <span class="hljs-comment">//将p1的地址赋给p2，p2也指向a</span><br><span class="hljs-comment">//注意与strcpy的区别，strcpy是字符串拷贝，而这里是指针赋值</span><br><span class="hljs-built_in">strcpy</span>(p1, p2); <span class="hljs-comment">//错误，p1和p2是指针，不能直接用strcpy拷贝</span><br></code></pre></td></tr></table></figure><ol start="3"><li>指针可以进行比较</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[N],*p;<br><span class="hljs-keyword">for</span>(p=&amp;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]; p&lt;=&amp;<span class="hljs-built_in">array</span>[N<span class="hljs-number">-1</span>];p++)<br>…<br><span class="hljs-comment">//p指向数组的首元素到尾元素</span><br></code></pre></td></tr></table></figure><ol start="4"><li>两个指向同一数组成员的指针相减，结果是两个指针之间的元素个数</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> s[<span class="hljs-number">10</span>], *p1, *p2;<br>p1 = &amp;s[<span class="hljs-number">0</span>]; <span class="hljs-comment">//指向s的首元素</span><br>p2 = &amp;s[<span class="hljs-number">9</span>]; <span class="hljs-comment">//指向s的尾元素</span><br><span class="hljs-type">int</span> <span class="hljs-built_in">strlen</span> = p2 - p1 + <span class="hljs-number">1</span>; <span class="hljs-comment">//计算字符串长度，+1是因为包括&#x27;\0&#x27;结束符</span><br></code></pre></td></tr></table></figure><ol start="5"><li>两个指针不能相加</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> s[<span class="hljs-number">10</span>], *low, *high;<br>low = &amp;s[<span class="hljs-number">0</span>]; <span class="hljs-comment">//指向s的首元素</span><br>high = &amp;s[<span class="hljs-number">9</span>]; <span class="hljs-comment">//指向s的尾元素</span><br><span class="hljs-type">char</span> *mid = (low + high)/<span class="hljs-number">2</span>; <span class="hljs-comment">//错误，不能直接相加两个指针</span><br><span class="hljs-type">char</span> *mid = low + (high - low)/<span class="hljs-number">2</span>; <span class="hljs-comment">//正确，先计算两个指针之间的距离，再除以2得到中间位置</span><br></code></pre></td></tr></table></figure><p><strong>注意：由于数据类型不同，指针加减的结果是以指针所指对象类型的大小为单位的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>  a[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span>  *pi= &amp;a[<span class="hljs-number">0</span>];<br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> *pc= &amp;str[<span class="hljs-number">0</span>];<br><br>pi++;   <span class="hljs-comment">/*若int占4个字节, 此时pi增加一个单位, 即四个字节, 结果为0x0104*/</span><br>pc++;  <span class="hljs-comment">/*若char占1个字节, 此时pc增加一个单位, 即一个字节, 结果为0x0101*/</span><br></code></pre></td></tr></table></figure><p><strong>一些辨析</strong><br>p++和p+1的区别<br>y &#x3D; *px + 1; 和y &#x3D; *(px+1);的区别<br>y &#x3D; (*px)++和y &#x3D; *px++;的区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">p++ <span class="hljs-comment">//指针p向后移动一个单位，指向下一个元素</span><br>p+<span class="hljs-number">1</span> <span class="hljs-comment">//指针p向后移动一个单位，指向下一个元素，但p本身不变</span><br><br>y = *px + <span class="hljs-number">1</span>; <span class="hljs-comment">//将px所指向的变量的值加1，结果赋给y</span><br>y = *(px+<span class="hljs-number">1</span>); <span class="hljs-comment">//将px所指向的下一个变量的值赋给y</span><br><br>y = (*px)++; <span class="hljs-comment">//将px所指向的变量的值赋给y，然后将px所指向的变量的值加1</span><br>y = *px++; <span class="hljs-comment">//将px所指向的变量的值赋给y，然后将指针p向后移动一个单位，指向下一个元素</span><br></code></pre></td></tr></table></figure><h2 id="问题6-输出输入行中的最长行"><a href="#问题6-输出输入行中的最长行" class="headerlink" title="问题6 输出输入行中的最长行"></a>问题6 输出输入行中的最长行</h2><h3 id="关于为什么要向函数传入指针"><a href="#关于为什么要向函数传入指针" class="headerlink" title="关于为什么要向函数传入指针"></a>关于为什么要向函数传入指针</h3><p>eg. swap()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span> &#123;<br>    <span class="hljs-type">int</span> temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><span class="hljs-comment">//经典的交换两个整数的函数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap_c</span><span class="hljs-params">(<span class="hljs-type">char</span> *a, <span class="hljs-type">char</span> *b)</span> &#123;<br>    <span class="hljs-type">char</span> temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><span class="hljs-comment">//交换两个字符的函数，可以交换字符串中指定的字符</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap_s</span><span class="hljs-params">(<span class="hljs-type">char</span> **a, <span class="hljs-type">char</span> **b)</span> &#123;<br>    <span class="hljs-type">char</span> *temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><span class="hljs-comment">//交换两个字符串的函数，传入指针的指针是为了能够修改原来的字符串指针，使得交换后的字符串仍然可以被访问。</span><br><br><span class="hljs-comment">//错误例</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap_s</span><span class="hljs-params">(<span class="hljs-type">char</span> *a,<span class="hljs-type">char</span> *b)</span> &#123;<br>    <span class="hljs-type">char</span> *temp = a; <span class="hljs-comment">//这里只是交换了指针的值，并没有修改原来的字符串指针</span><br>    a = b;<br>    b = temp;<br>&#125;<br><span class="hljs-comment">//只在函数内部交换了指针的值，根本没有对外部产生影响</span><br></code></pre></td></tr></table></figure><p><strong>对于C语言来说，函数传入值是按值传递的，传入值都是一个新的拷贝，即函数内部对参数的修改不会影响到外部变量。</strong><br>但地址在内存中唯一，即使函数中是参数的副本，只要解引用的是这个唯一地址，修改就会反映在原变量上。</p><h3 id="非常简洁的strcpy函数"><a href="#非常简洁的strcpy函数" class="headerlink" title="非常简洁的strcpy函数"></a>非常简洁的strcpy函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">strcopy</span><span class="hljs-params">(<span class="hljs-type">char</span> *s,  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *t)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>((*s++ = *t++));<br>&#125;<br><span class="hljs-comment">//while循环的条件是(*s++ = *t++)，即将t所指向的字符赋值给s所指向的字符，并将s和t都向后移动一个位置，直到遇到&#x27;\0&#x27;结束符为止。</span><br></code></pre></td></tr></table></figure><h3 id="常用的字符串函数"><a href="#常用的字符串函数" class="headerlink" title="常用的字符串函数"></a>常用的字符串函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span>;   <span class="hljs-comment">/*计算字符串长度, 字符串以\0结果*/</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span>; <span class="hljs-comment">/*将字符串t拷贝到字符串s中*/</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span>;  <span class="hljs-comment">/*将字符串t拷贝到字符串s尾部*/</span> <br><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], <span class="hljs-type">char</span> t[])</span>;  <span class="hljs-comment">/*比较两个字符串，找第一个不相等的字符,若s&gt;t,则返回大于0的数;若s&lt;t,则返回小于0的数;若相等, 返回0 */</span><br></code></pre></td></tr></table></figure><p>C提供的高效函数接口（不仅仅用于字符串）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *s, <span class="hljs-type">void</span> *t, <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">memmove</span><span class="hljs-params">(<span class="hljs-type">void</span> *s, <span class="hljs-type">void</span> *t, <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">memcmp</span><span class="hljs-params">(<span class="hljs-type">void</span> *s, <span class="hljs-type">void</span> *t, <span class="hljs-type">int</span> n)</span>;<br></code></pre></td></tr></table></figure><h3 id="find-long-str-c"><a href="#find-long-str-c" class="headerlink" title="find_long_str.c"></a>find_long_str.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>        &#123;<br>            i++;<br>        &#125;<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">str_copy</span><span class="hljs-params">(<span class="hljs-type">char</span> *s,  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *t)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>((*s++ = *t++));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> line[MAXLINE];<br>    <span class="hljs-type">char</span> save[MAXLINE];<br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(gets(line)!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(line)&gt;max)<br>            &#123;<br>                max = <span class="hljs-built_in">strlen</span>(line);<br>                str_copy(save,line);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,save);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用指针优化"><a href="#用指针优化" class="headerlink" title="用指针优化"></a>用指针优化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//省去了strcpy的遍历复制，直接进行指针交换</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (s[i++]!=<span class="hljs-string">&#x27;\0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> i;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> buf1[MAXLINE],buf2[MAXLINE];<br>    <span class="hljs-type">int</span> max=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> *saveptr = buf1;<br>    <span class="hljs-type">char</span> *curptr = buf2;<br>    <span class="hljs-type">char</span> *temp;         <span class="hljs-comment">//交换，而且必须交换</span><br><br>    <span class="hljs-keyword">while</span> (gets(curptr)!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(curptr);<br>        <span class="hljs-keyword">if</span>(len&gt;max)<br>        &#123;<br>            max = len;<br>            temp = curptr;<br>            curptr = saveptr;<br>            saveptr = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,saveptr);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">测试点</span><br><span class="hljs-comment">This is a short line.</span><br><span class="hljs-comment">This one is even shorter.</span><br><span class="hljs-comment">But this line is significantly longer than the previous two and should be detected as the longest one.</span><br><span class="hljs-comment">Tiny.</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="为什么必须交换指针"><a href="#为什么必须交换指针" class="headerlink" title="为什么必须交换指针"></a>为什么必须交换指针</h3><p>假如我只写<code>curptr = saveptr;</code>，那么下一次gets(curptr)就会覆盖掉saveptr的内容，因为curptr和saveptr指向的是同一块内存空间。<br>交换指针后，curptr和saveptr指向不同的内存空间，curptr指向当前行的内容，saveptr指向最长行的内容，这样就不会覆盖了。<br>可以保护saveptr的内容不被覆盖。</p><h2 id="指针与数组的补充"><a href="#指针与数组的补充" class="headerlink" title="指针与数组的补充"></a>指针与数组的补充</h2><h3 id="strlen和strcpy的实现"><a href="#strlen和strcpy的实现" class="headerlink" title="strlen和strcpy的实现"></a>strlen和strcpy的实现</h3><p><strong>仅做记录，想不起来再看看，写法很多</strong><br><em>注意在函数定义中形参形式char s[ ]和char *s完全等价，即指向某类型的指针与该类型没有指明长度的数组是同一回事。用哪个取决于在函数里表达式的写法。</em></p><ol><li>strlen的实现</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//1) 数组方式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">( <span class="hljs-type">char</span> s[ ])</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(s[n] != ‘\<span class="hljs-number">0</span>’)<br>++n;<br><span class="hljs-keyword">return</span> (n);<br>&#125;<br><span class="hljs-comment">//2) 指针方式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">for</span>(n=<span class="hljs-number">0</span>; *s != ‘\<span class="hljs-number">0</span>’; s++)<br>n++;<br><span class="hljs-keyword">return</span> (n);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>strcpy的实现</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//1) 数组方式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> s[ ], <span class="hljs-type">char</span> t[ ])</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((s[i] = t[i]) != ‘\<span class="hljs-number">0</span>’)<br>i++;<br>&#125;<br><span class="hljs-comment">//2) 指针方式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">char</span> *t)</span><br>&#123;<br><span class="hljs-keyword">while</span>((*s = *t) != ‘\<span class="hljs-number">0</span>’)&#123;<br>s++; t++;<br>&#125;<br>&#125;<br><span class="hljs-comment">//3) 指针方式（更简洁）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">char</span> *t)</span><br>&#123;<br><span class="hljs-keyword">while</span>((*s++ = *t++));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><ol><li>浅拷贝<br>通过指针赋值，如: px &#x3D; py;两指针指向同一对象。该拷贝的最大负作用是当其中的一个指针被释放，另一个指针将成为无所指对象（指针悬挂）。(Shallow copy-浅拷贝)</li><li>深拷贝<br>通过strcpy函数，如：strcpy(px, py); 这种拷贝使得两个指针所指内容相同，但存放在各自的空间中。( Deep copy-深拷贝 )</li></ol><h4 id="指针悬挂（悬空指针）"><a href="#指针悬挂（悬空指针）" class="headerlink" title="指针悬挂（悬空指针）"></a>指针悬挂（悬空指针）</h4><p><strong>简单指针悬挂</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//分配内存空间</span><br>*p = <span class="hljs-number">10</span>; <span class="hljs-comment">//给p所指向的内存空间赋值</span><br><span class="hljs-built_in">free</span>(p); <span class="hljs-comment">//释放内存空间</span><br>*p = <span class="hljs-number">99</span>; <span class="hljs-comment">//错误，p所指向的内存空间已经被释放，p成为悬挂指针</span><br></code></pre></td></tr></table></figure><p><strong>浅拷贝导致的指针悬挂</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> *px = &amp;a; <span class="hljs-comment">//px指向a</span><br><span class="hljs-type">int</span> *py;    <span class="hljs-comment">//野指针，仅做示例</span><br>py = px; <span class="hljs-comment">//py指向a，和px指向同一地址</span><br><span class="hljs-built_in">free</span>(px); <span class="hljs-comment">//释放px所指向的内存空间，py仍然指向a，但a已经被释放，py成为悬挂指针</span><br></code></pre></td></tr></table></figure><p><strong>函数调用导致的指针悬挂</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *p;<br>    ...<br>    p = fun();  <span class="hljs-comment">// 🚨 调用函数，接收返回的 char* 指针</span><br>    ...<br>&#125;<br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *p;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello World&quot;</span>;  <span class="hljs-comment">// ✅ 局部字符数组，分配在栈上</span><br>    ...<br>    p = str;<br>    <span class="hljs-keyword">return</span> p;  <span class="hljs-comment">// 🚨 返回的是局部变量 str 的地址</span><br>&#125;<br></code></pre></td></tr></table></figure><p>str是函数内部的局部变量，当函数执行完毕后，栈帧被销毁，str的内存空间被释放，返回了一块已经被释放的内存地址给p，这样p就成为了悬挂指针。访问p会导致未定义行为。<br><strong>解决办法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//方法一：使用 malloc() 分配堆内存（深拷贝）</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">strcpy</span>(p, <span class="hljs-string">&quot;Hello World&quot;</span>);<br>    <span class="hljs-keyword">return</span> p;  <span class="hljs-comment">// OK：返回的是堆内存</span><br>&#125;<br><span class="hljs-comment">//但注意，调用者需要负责释放这块内存</span><br><br><span class="hljs-comment">//方法二：使用静态变量（静态存储期）</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> str[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-keyword">return</span> str;  <span class="hljs-comment">// OK：静态变量在函数退出后仍然有效</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h4><p>上面定义过一个野指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *py; <span class="hljs-comment">//野指针，未初始化，指向未知地址</span><br></code></pre></td></tr></table></figure><p><strong>危害</strong><br>野指针会导致程序访问非法内存地址，可能引发段错误（Segmentation Fault）或其他未定义行为。使用野指针可能会导致程序崩溃、数据损坏或安全漏洞。<br><strong>解决办法</strong></p><ol><li>初始化指针</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *py = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//初始化为NULL，表示指针不指向任何有效地址</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在使用指针之前，确保它指向一个有效的内存地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *py = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//分配内存空间</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在使用完指针后，及时释放内存并将指针置为NULL</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">free</span>(py); <span class="hljs-comment">//释放内存</span><br>py = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//将指针置为NULL，避免野指针</span><br></code></pre></td></tr></table></figure><p><strong>一种良好的写法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-comment">// 使用 p 做点事情</span><br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// ✅ 避免后续再次访问非法内存</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法确保了在使用指针之前检查是否成功分配内存，并在使用完毕后将指针置为NULL，避免野指针的出现</p><h4 id="堆和栈（查缺补漏）"><a href="#堆和栈（查缺补漏）" class="headerlink" title="堆和栈（查缺补漏）"></a>堆和栈（查缺补漏）</h4><table><thead><tr><th>特性</th><th>栈（Stack）</th><th>堆（Heap）</th></tr></thead><tbody><tr><td>分配方式</td><td>编译器自动分配（静态大小）</td><td>程序员手动申请 (<code>malloc</code>&#x2F;<code>new</code>)，手动释放</td></tr><tr><td>生命周期</td><td>函数调用时创建，函数返回时自动销毁</td><td>手动释放前一直存在（哪怕函数已退出）</td></tr><tr><td>分配速度</td><td>⚡ 非常快（连续内存、编译期决定）</td><td>🐢 较慢（动态分配、操作系统管理）</td></tr><tr><td>内存位置</td><td>内存的高地址（地址向下增长）</td><td>内存的低地址（地址向上增长）</td></tr><tr><td>空间大小</td><td>通常较小（如几MB）</td><td>通常较大（操作系统最大支持）</td></tr><tr><td>安全性</td><td>相对安全，编译器管理</td><td>容易出错，可能内存泄漏、悬空指针等</td></tr><tr><td>示例</td><td><code>char buf[100];</code>（局部数组）</td><td><code>char *p = malloc(100);</code></td></tr></tbody></table><p><strong>注意</strong>：栈内存是自动管理的，函数返回时会自动释放；堆内存需要手动释放，否则会造成内存泄漏。<br><strong>使用场景</strong>：栈适合存储小数据（局部变量、函数参数等），堆适合存储大数据（动态数组、链表、树等，以及需要跨函数使用的数据）。</p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p><code>char *p [10];</code><br>首先他是一个指向字符串类型的指针char <em>p，其次他是一个数组[10]，所以是指针数组<br>对于先前提到的<code>char (*p)[10];</code>，首先他是一个指针</em>p，其次他指向char [10]，所以他是一个数组指针</p><h3 id="指针数组和二维数组对比"><a href="#指针数组和二维数组对比" class="headerlink" title="指针数组和二维数组对比"></a>指针数组和二维数组对比</h3><ol><li>二维数组</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义</span><br><span class="hljs-type">char</span> days[<span class="hljs-number">7</span>][<span class="hljs-number">10</span>] = &#123;<br>“Sunday”, “Monday”, “Tuesday”, “Wednesday”,<br>“Thursday”, “Friday”, “Saturday”<br>&#125;;<br><br><span class="hljs-comment">//按行读取，strcmp(),string_compare，属于string.h</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, days[i]);<br>gets(days[i]);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(days[i], <span class="hljs-string">&quot;Friday&quot;</span>)==<span class="hljs-number">0</span>)<br>    …<br><br><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>[0]</th><th>[1]</th><th>[2]</th><th>[3]</th><th>[4]</th><th>[5]</th><th>[6]</th><th>[7]</th><th>[8]</th><th>[9]</th></tr></thead><tbody><tr><td>days[0]</td><td>S</td><td>u</td><td>n</td><td>d</td><td>a</td><td>y</td><td>\0</td><td></td><td></td><td></td></tr><tr><td>days[1]</td><td>M</td><td>o</td><td>n</td><td>d</td><td>a</td><td>y</td><td>\0</td><td></td><td></td><td></td></tr><tr><td>days[2]</td><td>T</td><td>u</td><td>e</td><td>s</td><td>d</td><td>a</td><td>y</td><td>\0</td><td></td><td></td></tr><tr><td>days[3]</td><td>W</td><td>e</td><td>d</td><td>n</td><td>e</td><td>s</td><td>d</td><td>a</td><td>y</td><td>\0</td></tr><tr><td>days[4]</td><td>T</td><td>h</td><td>u</td><td>r</td><td>s</td><td>d</td><td>a</td><td>y</td><td>\0</td><td></td></tr><tr><td>days[5]</td><td>F</td><td>r</td><td>i</td><td>d</td><td>a</td><td>y</td><td>\0</td><td></td><td></td><td></td></tr><tr><td>days[6]</td><td>S</td><td>a</td><td>t</td><td>u</td><td>r</td><td>d</td><td>a</td><td>y</td><td>\0</td><td></td></tr></tbody></table><ol start="2"><li>指针数组</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义</span><br><span class="hljs-type">char</span> *days[<span class="hljs-number">7</span>] = &#123;<br>“Sunday”, “Monday”, “Tuesday”, “Wednesday”,<br>“Thursday”, “Friday”, “Saturday”<br>&#125;;<br><br><span class="hljs-comment">//使用方式</span><br><span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>],*days[<span class="hljs-number">7</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buf);<br>days[i] = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(buf)+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">strcpy</span>(days[i], buf);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(days[i], buf)==<span class="hljs-number">0</span>)<br>    …<br></code></pre></td></tr></table></figure><ol start="3"><li>类似的地方</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//如何访问Friday的y</span><br>*(days[<span class="hljs-number">5</span>]+<span class="hljs-number">5</span>) = days[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>] = ‘y’<br></code></pre></td></tr></table></figure><h3 id="指针数组用例"><a href="#指针数组用例" class="headerlink" title="指针数组用例"></a>指针数组用例</h3><p>使用指针数组来存放不同长度的字符串可以节省存贮空间，如，存放多个单词串、行。例如，如果要保存从标准输入或文件中读入的行，字符指针数组是一个好的选择。因为读入的行可能长短差异很大。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//arrayptr_storage.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE 1024</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLENGTH 512</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> s[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    i++;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">strcopy</span><span class="hljs-params">(<span class="hljs-type">char</span> *s,<span class="hljs-type">char</span> *t)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>((*s++ = *t++));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[MAXLENGTH],*save[MAXLINE];<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (gets(buf)!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        save[i] =(<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(buf)+<span class="hljs-number">1</span>);<br>        strcopy(save[i],buf);<br>        i++;<br><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,save[<span class="hljs-number">0</span>]);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组补充"><a href="#二维数组补充" class="headerlink" title="二维数组补充"></a>二维数组补充</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">( )</span><br>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = &#123; “abcd”, “efgh”, “ijkl”, “mnop” &#125;;<br>    <span class="hljs-built_in">printf</span>(“a=%x,  a[<span class="hljs-number">0</span>]=%x,  &amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=%x\n”, a, a[<span class="hljs-number">0</span>], &amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(“a+<span class="hljs-number">1</span>=%x,  a[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>=%x,  &amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=%x\n”, a+<span class="hljs-number">1</span>, a[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>, &amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(“**(a+<span class="hljs-number">1</span>)=%c,  *(a[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)=%c\n”, **(a+<span class="hljs-number">1</span>), *(a[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>));<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>表格示意图</strong></p><table><thead><tr><th></th><th>a[0]</th><th>a[0]+1</th><th>a[0]+2</th><th>a[0]+3</th><th>a[0]+4</th></tr></thead><tbody><tr><td>a[0]</td><td>a</td><td>b</td><td>c</td><td>d</td><td>\0</td></tr><tr><td>a[1]</td><td>e</td><td>f</td><td>g</td><td>h</td><td>\0</td></tr><tr><td>a[2]</td><td>i</td><td>j</td><td>k</td><td>l</td><td>\0</td></tr><tr><td>a[3]</td><td>m</td><td>n</td><td>o</td><td>p</td><td>\0</td></tr></tbody></table><p><strong>运行结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">a= 0x194,  a[0]= 0x194,  &amp;a[0][0]= 0x194<br>a+1= 0x199,  a[0]+1= 0x195,  &amp;a[0][1]= 0x195<br>**(a+1)= ‘e’,  *(a[0]+1) =‘b’<br></code></pre></td></tr></table></figure><p><strong>一点解释</strong><br>简单来说，二维数组，先指定行，后指定列，行确定下来后，加减整数都是对列的操作</p><ul><li>a是原始二维数组，都没指定，默认是第0行的地址，默认指向0,0</li><li>a[0]指定了0行，未指定列时，默认指向0列，所以和a结果一样</li><li>&amp;a[0][0]是对a[0][0]取地址，就是0,0本身</li><li>a+1是第1行的地址，因为没有指定行，加减就是行加减</li><li>a[0]+1是0,1,已经指定行，加减就是列加减</li><li>&amp;a[0][1]不解释</li><li>**(a+1)是两次解引用，a+1相当于a[1]，指向第1行，也就是第1行的地址，*(a+1)就是a[1]解引用得到第1行，它指向该行首元素，所以再次解引用**(a+1)就是1行0列的值</li></ul><hr><p><strong>二维数组的本质是数组的数组</strong><br>a[i]就是i行存放数字的数组，它也发生退化，名称本身是a[i]，但仍是指针，指向首元素</p><h3 id="指针数组的应用"><a href="#指针数组的应用" class="headerlink" title="指针数组的应用"></a>指针数组的应用</h3><h4 id="批量存储数据并通过函数返回"><a href="#批量存储数据并通过函数返回" class="headerlink" title="批量存储数据并通过函数返回"></a>批量存储数据并通过函数返回</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">month_name</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> *name[] = <br>    &#123;<br>        “illegal month”,<br>        “January”,<br>        “February”,<br>        “March”,<br>        “April”,<br>        “May”,<br>        “June”,<br>        “July”,<br>        “August”,<br>        “September”,<br>        “October”,<br>        “November”,<br>        “December”<br>        <span class="hljs-comment">//引号有误，仅做参考</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>((n&lt;<span class="hljs-number">1</span>||n&gt;<span class="hljs-number">12</span>)?name[<span class="hljs-number">0</span>]:name[n])<br>&#125;<br></code></pre></td></tr></table></figure><p>可用于存储标准数据，作为数据库与其他数据进行比较</p><h4 id="传入命令行参数"><a href="#传入命令行参数" class="headerlink" title="传入命令行参数"></a>传入命令行参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span><br></code></pre></td></tr></table></figure><p>传入的命令行参数存储在<code>char *argv[]</code>里<br>例如运行<code>copy file1 file2</code><br>copy是程序名，file1和file2就是参数<br>argc此时为3，argv[i]就为参数，其中第一个参数一定是程序本身</p><table><thead><tr><th>索引</th><th>含义</th></tr></thead><tbody><tr><td>argv[0]</td><td>命令本身</td></tr><tr><td>argv[1]</td><td>第一个参数</td></tr><tr><td>argv[2]</td><td>第二个参数</td></tr><tr><td>…</td><td>…</td></tr><tr><td>argv[argc-1]</td><td>第 argc-1 个参数</td></tr></tbody></table><h2 id="问题7-实现echo"><a href="#问题7-实现echo" class="headerlink" title="问题7 实现echo"></a>问题7 实现echo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//test_echo.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;argc;i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%c&quot;</span>,argv[i], (i&lt;argc<span class="hljs-number">-1</span>)?<span class="hljs-string">&#x27; &#x27;</span>:<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果改为<code>int i =0;</code>则会先输出test_echo.exe的路径</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><ul><li>函数指针：<code>int (*fp)()</code></li><li>返回值为指针的函数: <code>int *fp()</code></li></ul><p><strong>注意区分两者</strong><br>函数的名称本来就是指针<br>函数名被作为该函数的指针处理</p><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> main<br>&#123;<br>    <span class="hljs-type">int</span> (*fnptr)(),result;<br>    fnptr = fn;<br>    result = (*fnptr)(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//等价于</span><br>    <span class="hljs-comment">//result = fn(20);</span><br>    <span class="hljs-comment">//也等价于</span><br>    <span class="hljs-comment">//result = fnptr(20);</span><br>    <span class="hljs-comment">//唯独不能是</span><br>    <span class="hljs-comment">//result = *fnptr(20);</span><br>    <span class="hljs-comment">//这是对返回值解引用</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数指针的参数列表"><a href="#函数指针的参数列表" class="headerlink" title="函数指针的参数列表"></a>函数指针的参数列表</h3><p>上面的例子里，声明函数指针时<code>int (*fnptr)()</code>，括号内没有指定参数类型，表示参数不定，实际上是老式C语法，建议写入传参类型，如函数定义时写的一样，但不用写形参名称</p><h3 id="函数指针的用处"><a href="#函数指针的用处" class="headerlink" title="函数指针的用处"></a>函数指针的用处</h3><ol><li><strong>函数派遣表-dispatch</strong><br>使用index来访问某个函数，用于菜单系统</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> fn0,fn1,fn2,fn3,fn4;<br><span class="hljs-comment">//多个函数</span><br><br><span class="hljs-type">int</span> (*dispatch[])(<span class="hljs-type">int</span>) = &#123;fn0,fn1,fn2,fn3,fn4&#125;;<br><span class="hljs-comment">//函数指针数组</span><br><br>(*dispatch[index])();<br><span class="hljs-comment">//用index调用函数</span><br></code></pre></td></tr></table></figure><p><strong>函数指针数组</strong><br><code>int (*dispatch [])(int);</code><br>首先是个指针<code>*dispatch</code>，然后是一个指针数组<code>*dispatch []</code>，最后是一个指向函数的指针数组<code>int (*dispatch [])(int)</code></p><ol start="2"><li>可以将函数作为参数进行传递</li></ol><h3 id="错误案例"><a href="#错误案例" class="headerlink" title="错误案例"></a>错误案例</h3><h4 id="eg1"><a href="#eg1" class="headerlink" title="eg1."></a>eg1.</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>,c;         <span class="hljs-comment">//野指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,<span class="hljs-built_in">string</span>);<span class="hljs-comment">//scanf不需要\n，这个样子反而会需要你输入额外的换行符，干扰下一个scanf</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);         <br>    insert(*<span class="hljs-built_in">string</span>,c);      <span class="hljs-comment">//传入的都是字符，insert()大概率是void函数，传入地址才能实现外部修改</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="eg2"><a href="#eg2" class="headerlink" title="eg2."></a>eg2.</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>,<span class="hljs-type">char</span> c)</span><br>&#123;<br>    <span class="hljs-comment">//这个插入函数是按照字母排序将c插入*string的</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">50</span>];     <span class="hljs-comment">//局部变量，函数调用完栈帧销毁</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;*<span class="hljs-built_in">string</span>&lt;c;i++)  <br>        s[i]=*<span class="hljs-built_in">string</span>++;     <span class="hljs-comment">//*string有类似于二维数组的索引</span><br>    s[i++]=c;<br>    <span class="hljs-keyword">for</span>(;*<span class="hljs-built_in">string</span>!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++) <span class="hljs-comment">//循环不会复制\0，将&#x27;\0&#x27;也插入</span><br>        s[i]=*<span class="hljs-built_in">string</span>++;<br>    <span class="hljs-keyword">return</span> s;   <span class="hljs-comment">//无效</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>     <span class="hljs-comment">//不建议写void main()</span><br>&#123;<br>    <span class="hljs-type">char</span> s1[<span class="hljs-number">50</span>],c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,s1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,insert(s1,c));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修正的insert()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//写法非常紧凑，可以学习</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>,<span class="hljs-type">char</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">50</span>], *s1=<span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;*s1&lt;c;i++)<br>        s[i]=*s1++;<br>    s[i++]=c;<br>    <span class="hljs-keyword">for</span>(;(s[i]=*s1++)!=<span class="hljs-string">&#x27;\0&#x27;</span>;i++)<br>        ;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;(<span class="hljs-built_in">string</span>[i]=s[i])!=‘\<span class="hljs-number">0</span>’;i++)     <span class="hljs-comment">//赋值同时判断</span><br>        ; <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="eg3"><a href="#eg3" class="headerlink" title="eg3."></a>eg3.</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//看着像是以前的大作业</span><br><span class="hljs-comment">//只有存储功能</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span>  <span class="hljs-comment">//作业单词排序</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>     <span class="hljs-type">int</span> n,i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,k,t,m;<br>     <span class="hljs-type">char</span> c;<br>     <span class="hljs-type">char</span> s[<span class="hljs-number">1024</span>][<span class="hljs-number">100</span>];<br>     FILE *in ,*out ;<br>     in = fopen (argv[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;r&quot;</span>);<br>     out = fopen (argv[<span class="hljs-number">2</span>],<span class="hljs-string">&quot;w&quot;</span>);<br>     <span class="hljs-keyword">while</span> ((c=fgetc(in) )!= EOF)<br>     &#123;<br>           <span class="hljs-keyword">if</span> (c == ‘ ’)    <span class="hljs-comment">//单词间只能有一个空格,多个出错</span><br>           &#123;<br>               i++;         <span class="hljs-comment">//读下一个单词，单词无’\0’</span><br>               j=<span class="hljs-number">0</span>;<br>           &#125;<br>           <span class="hljs-keyword">else</span><br>               s[i][j++] = c;<br>     &#125;<br>     ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>补充了排序功能的完整代码（没有自己手敲，待学习，仅做记录）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1024</span>][<span class="hljs-number">100</span>]; <span class="hljs-comment">// 最多1024个单词，每个最多99字符</span><br>    FILE *in, *out;<br><br>    in = fopen(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>);<br>    out = fopen(argv[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;w&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!in || !out) &#123;      <span class="hljs-comment">//由于NULL是0，所以!NULL是1,</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件打开失败！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 读取所有单词</span><br>    <span class="hljs-keyword">while</span> ((c = fgetc(in)) != EOF) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span> || c == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>            s[i][j] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 每个单词以&#x27;\0&#x27;结尾</span><br>            i++;<br>            j = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            s[i][j++] = c;<br>        &#125;<br>    &#125;<br>    s[i][j] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 最后一个单词结束</span><br><br>    <span class="hljs-type">int</span> n = i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 单词总数</span><br><br>    <span class="hljs-comment">// 简单冒泡排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; a &lt; n - <span class="hljs-number">1</span>; a++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = a + <span class="hljs-number">1</span>; b &lt; n; b++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(s[a], s[b]) &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">char</span> temp[<span class="hljs-number">100</span>];<br>                <span class="hljs-built_in">strcpy</span>(temp, s[a]);<br>                <span class="hljs-built_in">strcpy</span>(s[a], s[b]);<br>                <span class="hljs-built_in">strcpy</span>(s[b], temp);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写入输出文件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>        <span class="hljs-built_in">fprintf</span>(out, <span class="hljs-string">&quot;%s\n&quot;</span>, s[k]);<br>    &#125;<br><br>    fclose(in);<br>    fclose(out);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>结构体就是一种自定义数据类型<br>eg.学生结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>    <span class="hljs-type">int</span> id;             <span class="hljs-comment">// 学号</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];      <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-type">float</span> score;        <span class="hljs-comment">// 成绩</span><br>&#125;;<br><br><span class="hljs-comment">//使用，实例化</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s1</span>;</span><br>s1.id = <span class="hljs-number">1001</span>;<br><span class="hljs-built_in">strcpy</span>(s1.name, <span class="hljs-string">&quot;Alice&quot;</span>);<br>s1.score = <span class="hljs-number">92.5</span>;<br><br><span class="hljs-comment">//更简洁的声明，typedef类型定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  …<br>&#125; DATE;<br><br><span class="hljs-comment">//定义变量</span><br>DATE d, *pd, ad[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><hr><p><strong>date结构体，和下面有关</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">date</span> &#123;</span><br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> yearday;<br><span class="hljs-type">char</span> mon_name[<span class="hljs-number">4</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><hr><p><strong>关于typedef</strong><br><code>typedef</code>不产生新的数据类型，只是将已有的数据类型重命名<br>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span>  <span class="hljs-type">int</span>  LENGTH;<br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">char</span>  *STRING;<br><span class="hljs-comment">//声明变量</span><br>LENGTH  len, maxlen;<br>STRING  lineptr[LINES], alloc( );<br><span class="hljs-comment">//等价于</span><br><span class="hljs-type">int</span>  len, maxlen;<br><span class="hljs-type">char</span>  *lineptr[LINES], *alloc( );<br></code></pre></td></tr></table></figure><hr><p><strong>用处</strong></p><ol><li>一些安全关键的软件中需要在程序中明确运行环境的数据类型长度，如：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> INT32;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">short</span> INT16<br>INT32 port0,port1;<br>…<br></code></pre></td></tr></table></figure><ol start="2"><li>用来定义结构类型，如FILE就是一个用typedef定义的结构类型。</li><li>数据结构中用来定义一个链表结点类型：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; *Nodeptr;<br>Nodeptr <span class="hljs-built_in">list</span>, p;<br>实际等价于：<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">list</span>,*<span class="hljs-title">p</span>;</span><br></code></pre></td></tr></table></figure><hr><p><strong><code>FILE</code>是怎么定义的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">iobuf</span> &#123;</span><br>   <span class="hljs-type">char</span> *_ptr;<br>   <span class="hljs-type">int</span> _cnt;<br>   <span class="hljs-type">char</span> *_base;<br>   <span class="hljs-type">int</span> _flag;<br>   <span class="hljs-type">int</span> _file;<br>   <span class="hljs-type">int</span> _charbuf;<br>   <span class="hljs-type">int</span> _bufsiz;<br>   <span class="hljs-type">char</span> *_tmpfname;<br> &#125;;<br> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">iobuf</span> <span class="hljs-title">FILE</span>;</span><br></code></pre></td></tr></table></figure><hr><p><strong>结构嵌套</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span>  &#123;</span><br>    <span class="hljs-type">int</span> ID; <br>    <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">char</span> address[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">char</span> department[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">double</span> salary;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">birthdate</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> <span class="hljs-title">table</span>[100];</span><br></code></pre></td></tr></table></figure><p><strong>注意，不能嵌套自己，但可以嵌套自己的指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">keyword</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">int</span> count;<br>    <span class="hljs-comment">//struct keyword next;  //错误</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">keyword</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指向下一个相同结构体的指针，构造链表</span><br>&#125;*base;     <span class="hljs-comment">//立即声明指向struct keyword的指针base</span><br><span class="hljs-comment">//相当于另外写：</span><br><span class="hljs-comment">//struct keyword *base;</span><br></code></pre></td></tr></table></figure><hr><p><strong>初始化和赋值（软拷贝）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">date</span> &#123;</span><br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> yearday;<br><span class="hljs-type">char</span> mon_name[<span class="hljs-number">4</span>];<br>&#125;;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">d</span> =</span> &#123;<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2025</span>,<span class="hljs-number">159</span>,<span class="hljs-string">&quot;Jun&quot;</span>&#125;;<br><br><span class="hljs-comment">//软拷贝</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">d1</span>,<span class="hljs-title">d2</span> =</span> &#123;<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2025</span>,<span class="hljs-number">159</span>,<span class="hljs-string">&quot;Jun&quot;</span>&#125;;<br>d1 = d2; <br></code></pre></td></tr></table></figure><hr><p><strong>访问结构成员</strong><br>结构变量名.成员名(.嵌套结构成员)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span>  &#123;</span><br>    <span class="hljs-type">int</span> ID; <br>    <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">char</span> address[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">char</span> department[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">double</span> salary;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">birthdate</span>;</span><br>&#125;;<br><br><span class="hljs-comment">//常规访问</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> <span class="hljs-title">uyhgb</span>;</span><br>uyhgb.salary = <span class="hljs-number">0</span>;<br>uyhgb.birthdate.year = <span class="hljs-number">2005</span>;<br><br><span class="hljs-comment">//指针访问，-&gt;运算符</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> *<span class="hljs-title">pd</span>, <span class="hljs-title">d</span>;</span> <span class="hljs-comment">//pd是指向struct date的指针</span><br>pd = &amp;d<span class="hljs-comment">//指向一个已有结构变量</span><br>pd = (<span class="hljs-keyword">struct</span> date *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> date));<span class="hljs-comment">//或者分配动态内存</span><br><span class="hljs-comment">//注意：小心野指针，与其它指针变量一样, 定义了pd并不表示pd有了它所指对象</span><br><br>pd-&gt;year = <span class="hljs-number">2005</span>;<br><span class="hljs-comment">//相当于(*pd).year = 2005;</span><br><span class="hljs-comment">//可以嵌套</span><br><span class="hljs-built_in">strcpy</span>(pd-&gt;mon_name,<span class="hljs-string">&quot;Jul&quot;</span>);<br></code></pre></td></tr></table></figure><hr><p><strong>例子：复数加减运算</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//complex.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">complex</span>      //结构体声明在最开头，全局作用域</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">float</span> real;<br>    <span class="hljs-type">float</span> imag;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-type">complex</span> <span class="hljs-title function_">addcomplex</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-type">complex</span> c1,<span class="hljs-keyword">struct</span> <span class="hljs-type">complex</span> c2)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">complex</span> <span class="hljs-title">c1</span>,<span class="hljs-title">c2</span>,<span class="hljs-title">c3</span>;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f %f %f %f&quot;</span>,&amp;c1.real,&amp;c1.imag,&amp;c2.real,&amp;c2.imag);<br>    c3 = addcomplex(c1,c2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%.2f, %.2f) + (%.2f, %.2f) = (%.2f, %.2f)\n&quot;</span>, c1.real, c1.imag, c2.real, c2.imag, c3.real, c3.imag);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-type">complex</span> <span class="hljs-title function_">addcomplex</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-type">complex</span> c1,<span class="hljs-keyword">struct</span> <span class="hljs-type">complex</span> c2)</span><br>&#123;<br>    <span class="hljs-type">float</span> sum_real,sum_imag;<br>    sum_real = c1.real + c2.real;<br>    sum_imag = c1.imag + c2.imag;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">complex</span> <span class="hljs-title">sum</span> =</span> &#123;sum_real,sum_imag&#125;;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125; <br></code></pre></td></tr></table></figure><hr><p><strong>结构数组</strong><br>和其他数据类型的数组一样<br><em>结构数组通常用来实现表单（如员工表、学生记录表、产品表等）这类数据结构。</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span>  &#123;</span><br>        <span class="hljs-type">int</span> ID; <br><span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> address[<span class="hljs-number">64</span>];<br><span class="hljs-type">char</span> department[<span class="hljs-number">64</span>];<br><span class="hljs-type">double</span> salary;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">date</span> <span class="hljs-title">birthdate</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> <span class="hljs-title">emplist</span>[100];</span><br></code></pre></td></tr></table></figure><hr><h2 id="问题8-统计输入中C语言关键字出现次数"><a href="#问题8-统计输入中C语言关键字出现次数" class="headerlink" title="问题8 统计输入中C语言关键字出现次数"></a>问题8 统计输入中C语言关键字出现次数</h2><p>编写一个程序，统计输入中C语言每个关键字的出现次数。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>需要一个指针数组<code>char *list[N]</code>存储关键字，再由一个整数数组<code>int count[N]</code>存储关键字出现次数<br>此时两数据相互关联，考虑使用结构体</p><hr><h2 id="不说别的，这个问题应该是从开始到现在最复杂的项目，我会按照我复刻课件代码的步骤一步步如实记录"><a href="#不说别的，这个问题应该是从开始到现在最复杂的项目，我会按照我复刻课件代码的步骤一步步如实记录" class="headerlink" title="不说别的，这个问题应该是从开始到现在最复杂的项目，我会按照我复刻课件代码的步骤一步步如实记录"></a><strong>不说别的，这个问题应该是从开始到现在最复杂的项目，我会按照我复刻课件代码的步骤一步步如实记录</strong></h2><hr><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><h4 id="1-定义结构体，初始化关键字字典"><a href="#1-定义结构体，初始化关键字字典" class="headerlink" title="1. 定义结构体，初始化关键字字典"></a>1. 定义结构体，初始化关键字字典</h4><p>先不管别的，把字典写好，再想别的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Key</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> *keyword;<br>    <span class="hljs-type">int</span> count;<br>&#125; Keytab[]&#123;<br>    &#123;<span class="hljs-string">&quot;auto&quot;</span>, <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;break&quot;</span>, <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-number">0</span>&#125;,<br>    ...     <span class="hljs-comment">//部分展示</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-拆分实现细节，提前声明我需要的函数"><a href="#2-拆分实现细节，提前声明我需要的函数" class="headerlink" title="2. 拆分实现细节，提前声明我需要的函数"></a>2. 拆分实现细节，提前声明我需要的函数</h4><p><strong>主要算法（伪代码）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (仍有新单词读入)<br><span class="hljs-keyword">if</span>(在关键字表中查找并找到输入的单词)<br>        相应关键字次数加<span class="hljs-number">1</span>；<br>输出关键字及出现次数；<br></code></pre></td></tr></table></figure><hr><h5 id="读入单词getword"><a href="#读入单词getword" class="headerlink" title="读入单词getword()"></a>读入单词getword()</h5><p>需要考虑到，不能继续使用<code>scanf(&quot;%s&quot;,word)</code></p><ol><li>不能正确处理标点符号和非字母字符</li><li>需要逐字符扫描，最好要可以判断是否是字母开头，到空格以及非字母字符时停止读入</li><li>scanf()没有长度限制，容易读入超长输入导致栈溢出，最好限制读入长度<br/><br>需要自定义读入函数<code>char getword(char *word,int lim);</code></li></ol><ul><li><p><code>char *word</code>在函数外声明，传入地址进行编辑即可</p></li><li><p>返回值是while循环条件，当读入的仍然是正确的单词时循环继续</p></li><li><p>使用常规判断方法<code>while((t=getword(char *word,int lim))!=EOF)</code></p></li><li><p>具体读入方法，由于需要逐字符读入，考虑getchar()</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码这一块</span><br><span class="hljs-comment">//注意仅能输入英文和半角标点，内含强制char2int，必须满足ASCII码</span><br><span class="hljs-comment">//另外本函数无法判断有可能出现在注释或输出流字符串内的if/auto等关键字</span><br><span class="hljs-comment">//注意我定义getchar返回char</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">getword</span><span class="hljs-params">(<span class="hljs-type">char</span> *w,<span class="hljs-type">int</span> lim)</span>       <br>&#123;<br>    <span class="hljs-type">int</span> c,t;<br>    <span class="hljs-keyword">if</span>(type(c = *w++ = getchar())!=LETTER)      <br>    <span class="hljs-comment">//多重赋值并判断，执行顺序：</span><br>    <span class="hljs-comment">//temp=getchar();--&gt;*w=temp;--&gt;w++;--&gt;c=temp;--&gt;tmp_type=type(c);--&gt;(tmp_type!=LETTER)?;</span><br>    &#123;<br>        *w=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> c;       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        返回自己，GPT版本的宏定义在此处就有可能出现误判，我反复拷打GPT，给出两版方案，全部都是错的</span><br><span class="hljs-comment">        如果LETTER是1，不管getchar返回char还是int，如果c是&#x27;1&#x27;，返回到main函数后，都会整型提升再进行运算，1会通过对返回值是否是LETTER的判断，造成误判</span><br><span class="hljs-comment">        如果LETTER是-1，下面while循环通过后返回LETTER，此时我必须要修改getchar返回int，但是在main函数内，-1会通过EOF判断，从而直接提前结束读取</span><br><span class="hljs-comment">        如果要修改为其他不会造成漏洞的数字，也不是找不到，找一个不会类型转换的两位数，或者直接找超过ASCII定义的128以上的数，都可以，但这就违背了最开始简洁、优雅的目的，所以课件中定义&#x27;a&#x27;和&#x27;0&#x27;是非常正确的做法</span><br><span class="hljs-comment">        但仍然需要增加一个对OTHER的宏定义，详见下一个函数</span><br><span class="hljs-comment">        */</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(--lim)<br>    &#123;<br>        t=type(c=*w++=getchar());<br>        <span class="hljs-keyword">if</span>(t!=LETTER&amp;&amp;t!=DIGIT)     <span class="hljs-comment">//注意要把数字也一起判断，小心自定义结构int32_t a = 20; 会被错误统计</span><br>        &#123;<br>            ungetc(c,<span class="hljs-built_in">stdin</span>);    <span class="hljs-comment">//与课件不同，注意需要stdin</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br>    *(w<span class="hljs-number">-1</span>) = <span class="hljs-string">&#x27;\0&#x27;</span>;  <span class="hljs-comment">//跳出循环并抹掉未通过if判断的非字母非数字字符并赋值为&#x27;\0&#x27;</span><br><br>    <span class="hljs-comment">/*等价于，多重赋值分开写，先判断再写入，更直观  </span><br><span class="hljs-comment">    while (--lim &gt; 0) </span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        c = getchar();</span><br><span class="hljs-comment">        t = type(c);</span><br><span class="hljs-comment">        if (t != LETTER &amp;&amp; t != DIGIT) &#123;</span><br><span class="hljs-comment">            ungetc(c, stdin); </span><br><span class="hljs-comment">            break;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        *w++ = c;</span><br><span class="hljs-comment">    &#125;*/</span>      <br>    <span class="hljs-keyword">return</span> LETTER;      <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>补充：文件中读取关键字</strong><br>课件里有我就贴在这了，看起来主要是把getchar()改成fgetc了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>  <span class="hljs-title function_">getword</span><span class="hljs-params">(<span class="hljs-type">char</span> s[], FILE *fp)</span><br>&#123;<br>    <span class="hljs-type">int</span> c,  i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(type(c=fgetc(fp))！= LETTER)  <br>        <span class="hljs-keyword">if</span>(c == EOF) <span class="hljs-keyword">return</span> c;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>    s[i++] = c;<br>    <span class="hljs-keyword">while</span>((c=fgetc(fp))!=EOF)&#123;<br>         <span class="hljs-keyword">if</span>(type(c)!=LETTER&amp;&amp;type(c)!=DIGTH)<br>              <span class="hljs-keyword">break</span>; <br>         s[i++] = c;<br>    &#125;<br>    s[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h5 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h5><p>在<code>getword()</code>时需要判断单词的类型来返回while判断条件<br>考虑define两种<strong>逻辑标签</strong>来作为易读的判断条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//课件版本，健壮性很低，数据可能会影响到控制逻辑（实则不然，上面的代码注释里有详细例子）</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LETTER <span class="hljs-string">&#x27;a&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DIGIT <span class="hljs-string">&#x27;0&#x27;</span></span><br><span class="hljs-comment">//增加OTHER为控制字符SOH，还算比较安全</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OTHER <span class="hljs-string">&#x27;\1&#x27;</span></span><br><br><span class="hljs-comment">//GPT推荐定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LETTER 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DIGIT 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OTHER 0</span><br></code></pre></td></tr></table></figure><br/><p>关于为什么不能用GPT给出的数字定义，注意上面的getword函数，在注释里有提到，这里补充一下什么是<strong>整型提升</strong><br>对于char类型，在ASCII范围（0-127），以及扩展ASCII码（128-255）在进行运算时（算术运算，比较运算，位运算）时，都会先发生隐式整型提升，实际上我已经使用过多次了，比如<code>char m; int c = m-&#39;a&#39;;</code>获取字母排序，比如char数字转换int数字，<code>char n; int c = n-&#39;0&#39;;</code></p><p>类型判断函数<code>type()</code>，用ASCII码判断最简单，可以把输入强行转换为整型，在ASCII码范围内比较即可，输出结果里只需返回字符串LETTER&#x2F;DIGIT&#x2F;other即可<br>由于比较简单，直接就可以写在这里了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//课件版本，单独写了判断逻辑（重复造轮子这块）并且健壮性低，主要是return a;可能引入未知用户输入</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">type</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>((a&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;a&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)||(a&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;a&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>))<br>    <span class="hljs-keyword">return</span> LETTER;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;a&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>    <span class="hljs-keyword">return</span> DIGIT;<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> a;       <br>&#125;<br><br><span class="hljs-comment">//修改版本</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span>  <span class="hljs-comment">//isalpha和isdigit都在ctype.h</span></span><br><br><span class="hljs-type">char</span> <span class="hljs-title function_">type</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalpha</span>(c)) <span class="hljs-keyword">return</span> LETTER;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(c)) <span class="hljs-keyword">return</span> DIGIT;<br>    <span class="hljs-keyword">return</span> OTHER;   <br>&#125;<br></code></pre></td></tr></table></figure><br/><p><strong>关于课件示例代码的问题</strong></p><ol><li>嵌套结构非常多，紧凑但易读性较差，比如<code>if(type(c=*w++=getchar())!=LETTER)</code>，连续赋值，嵌套函数，自增运算，条件判断<br>上面写过执行顺序，这里再提一下</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">temp=getchar();<br>*w=temp;<br>w++;<br>c=temp;<br>tmp_type=type(c);<br>(tmp_type!=LETTER)?;<br></code></pre></td></tr></table></figure><ol start="2"><li>宏定义LETTER和DIGIT是非常有效且易读的办法，但定义什么值是需要仔细考虑的，GPT建议改为纯数字，错误我已经在上面代码注释中指出，但新增OTHER定义我认为还是比较有必要的，目前定义为’\1’，为ASCII码1号控制符，SOH，目前来看应该没有问题</li><li>这个项目本质上就是C编译器的前端，需要完成<em>C 的“编译前阶段”——词法分析（lexical analysis）</em>，但这个只是简化版，在遇到如下的测试输入就会出现错误统计，注释及字符串常量中可能存在关键字会被错误统计</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// if this works, we are good</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;if you see this, success\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="折半查找算法"><a href="#折半查找算法" class="headerlink" title="折半查找算法"></a>折半查找算法</h5><p>在有序数据集中查找指定数据项最常用及最快的算法就是折半查找算法。<br>基本思想不介绍了，比较简单，直接看代码实现<br><strong>在有序整型数组中查找给定元素</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span> <span class="hljs-params">(<span class="hljs-type">int</span> item,<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">int</span> low=<span class="hljs-number">0</span>,high=len<span class="hljs-number">-1</span>,mid;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)<br>    &#123;<br>        mid = (high + low)/<span class="hljs-number">2</span>;   <span class="hljs-comment">//在每次循环开始时得到新的mid</span><br>        <span class="hljs-keyword">if</span>(item&gt;<span class="hljs-built_in">array</span>[mid])<br>        low = mid + <span class="hljs-number">1</span>;  <span class="hljs-comment">//mid+1，因为mid本身肯定是已经比item小了，直接往后一位</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item&lt;<span class="hljs-built_in">array</span>[mid])<br>        high = mid - <span class="hljs-number">1</span>;  <span class="hljs-comment">//同理mid-1</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> mid; <span class="hljs-comment">//找到满足array[mid]=item的mid后返回</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//字典没有item返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果基于指针运算就会有几点不同</strong></p><ol><li>比较item和字典时需要用到strcmp</li></ol><ul><li>头文件<code>&lt;string.h&gt;</code></li><li>函数声明<br><code>int strcmp(const char *s1, const char *s2);</code></li><li>返回值及含义</li></ul><table><thead><tr><th>返回值</th><th>含义</th></tr></thead><tbody><tr><td><code>== 0</code></td><td>两个字符串<strong>完全相等</strong>（包括内容和长度）</td></tr><tr><td><code>&lt; 0</code>（负数）</td><td><code>s1</code> 的<strong>第一个不相等字符小于</strong> <code>s2</code> 的对应字符</td></tr><tr><td><code>&gt; 0</code>（正数）</td><td><code>s1</code> 的<strong>第一个不相等字符大于</strong> <code>s2</code> 的对应字符</td></tr></tbody></table><ol start="2"><li>索引mid,high,low使用指针地址，字典里是顺序存储结构，地址连续，使用自定义结构体无影响</li><li>由于使用指针索引，前面指针运算的部分提到过指针计算中间值需要另一种写法<br><code>mid = low + (high - low)/2;</code></li></ol><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> Key *<span class="hljs-title function_">Key_search</span><span class="hljs-params">(<span class="hljs-type">char</span> *w, <span class="hljs-keyword">struct</span> Key tab[], <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">int</span> t;  <span class="hljs-comment">//把strcmp结果存一下，避免多次运算</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Key</span> *<span class="hljs-title">low</span> =</span> &amp;tab[<span class="hljs-number">0</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Key</span> *<span class="hljs-title">high</span> =</span> &amp;tab[len<span class="hljs-number">-1</span>];     <span class="hljs-comment">//在终版代码里len用NKEYS代替</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Key</span> *<span class="hljs-title">mid</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span>(low&lt;high)<br>    &#123;   <br>        mid = low + (high-low)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(t = <span class="hljs-built_in">strcmp</span>(*w,mid-&gt;keyword)&lt;<span class="hljs-number">0</span>)<br>            high = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">0</span>)<br>            low = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>NKEYS怎么算的</strong><br><code>#define  NKEYS (sizeof(Keytab) /sizeof(struct Key))</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>DS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[DS]P0绪论</title>
    <link href="/2025/06/13/DS-P0%E7%BB%AA%E8%AE%BA/"/>
    <url>/2025/06/13/DS-P0%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>煮波做过一个转码的梦</p><h2 id="数据结构包括"><a href="#数据结构包括" class="headerlink" title="数据结构包括"></a>数据结构包括</h2><ul><li>数据的逻辑结构</li><li>数据的物理（存储）结构</li><li>数据的操作（算法）</li></ul><ol><li>逻辑结构</li></ol><ul><li>线性结构：线性表，栈，队列，串，文件</li><li>非线性结构：树，二叉树，图，集合</li></ul><ol start="2"><li>存储结构</li></ol><ul><li>顺序存储结构：地址连续</li><li>链式存储结构：地址任意，有指针</li><li>索引存储结构：数据本身和索引表，易增删查，占用空间极大</li><li>散列（哈希）存储结构：哈希函数处理存储位置，易增删查，难确定哈希函数</li></ul><ol start="3"><li>操作</li></ol><ul><li>构造：构造具有某种逻辑结构的数据集，如构造一个线性表、链表、树和图等</li><li>检索：在已有数据集中查找某一指定元素</li><li>插入：在已有数据集中插入一指定元素</li><li>删除：在已有数据集中插入一指定元素</li><li>排序：对一数据集中元素按照某一顺序进行排列</li><li>遍历：访问数据集中所有元素<br><img src="/img/post_illust_img/postDS/post0/image.jpg" alt="数据结构"></li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>复杂度</p><ul><li>时间复杂度：算法执行所需的时间</li><li>空间复杂度：算法执行所需的存储空间</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>DS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号1</title>
    <link href="/2025/06/13/%E4%BF%A1%E5%8F%B71/"/>
    <url>/2025/06/13/%E4%BF%A1%E5%8F%B71/</url>
    
    <content type="html"><![CDATA[<p>爱来自烤漆</p><h1 id="狄拉克函数计算"><a href="#狄拉克函数计算" class="headerlink" title="狄拉克函数计算"></a>狄拉克函数计算</h1><p><img src="/img/post_illust_img/postBioE/sig01/image.png" alt="alt text"></p><p>计算<br>这个公式中用到了<strong>狄拉克δ函数（Dirac Delta function）</strong> 的变换性质，我们逐步来看是怎么变换的：</p><hr><h3 id="原式："><a href="#原式：" class="headerlink" title="原式："></a>原式：</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mn>2</mn></mrow><mrow><mo>+</mo><mn>2</mn></mrow></msubsup><mo stretchy="false">(</mo><msup><mi>t</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>t</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>δ</mi><mrow><mo fence="true">(</mo><mfrac><mi>t</mi><mn>3</mn></mfrac><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">(3)\int_{-2}^{+2} (t^2 + 3t) \cdot \delta\left(\frac{t}{3} - 1\right) dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5343em;vertical-align:-0.9703em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.564em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span></span><hr><h3 id="第一步：使用δ函数的变换公式"><a href="#第一步：使用δ函数的变换公式" class="headerlink" title="第一步：使用δ函数的变换公式"></a>第一步：使用δ函数的变换公式</h3><p>狄拉克δ函数有一个常用的变换规则：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mi>i</mi></munder><mfrac><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∣</mi><msup><mi>g</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\delta(g(t)) = \sum_i \frac{\delta(t - t_i)}{|g&#x27;(t_i)|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.7047em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(t_i) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(t) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 的解。</p><hr><p>对本题来说：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>t</mi><mn>3</mn></mfrac><mo>−</mo><mn>1</mn><mo>⇒</mo><mi>t</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">g(t) = \frac{t}{3} - 1 \Rightarrow t = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1696em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8246em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">g&#x27;(t) = \frac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>于是：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>δ</mi><mrow><mo fence="true">(</mo><mfrac><mi>t</mi><mn>3</mn></mfrac><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>=</mo><mn>3</mn><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta\left(\frac{t}{3} - 1\right) = 3\delta(t - 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span><hr><h3 id="第二步：代入变换结果"><a href="#第二步：代入变换结果" class="headerlink" title="第二步：代入变换结果"></a>第二步：代入变换结果</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mrow><mo>−</mo><mn>2</mn></mrow><mrow><mo>+</mo><mn>2</mn></mrow></msubsup><mo stretchy="false">(</mo><msup><mi>t</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>t</mi><mo stretchy="false">)</mo><mo>⋅</mo><mn>3</mn><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\int_{-2}^{+2} (t^2 + 3t) \cdot 3\delta(t - 3) dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5343em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.564em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span></span><hr><h3 id="第三步：利用δ函数的抽样性质"><a href="#第三步：利用δ函数的抽样性质" class="headerlink" title="第三步：利用δ函数的抽样性质"></a>第三步：利用δ函数的抽样性质</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><msub><mi>t</mi><mn>0</mn></msub><mo>∈</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\int_{a}^{b} f(t)\delta(t - t_0) dt = \begin{cases}f(t_0), &amp; \text{if } t_0 \in [a, b] \\0, &amp; \text{otherwise}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.511em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.599em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">otherwise</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>而在这里，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub><mo>=</mo><mn>3</mn><mo mathvariant="normal">∉</mo><mo stretchy="false">[</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t_0 = 3 \notin [-2, 2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span>，所以结果为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">= 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>变换过程是：</p><ol><li><p>利用 δ 函数缩放性质：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>δ</mi><mrow><mo fence="true">(</mo><mfrac><mi>t</mi><mn>3</mn></mfrac><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>=</mo><mn>3</mn><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">   \delta\left(\frac{t}{3} - 1\right) = 3 \delta(t - 3)   </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2921em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span></li><li><p>δ 函数抽样位置超出了积分区间 → 结果为 0。</p></li></ol><hr><h1 id="单位阶跃序列"><a href="#单位阶跃序列" class="headerlink" title="单位阶跃序列"></a>单位阶跃序列</h1><p><img src="/img/post_illust_img/postBioE/sig01/image-1.png" alt="alt text"></p><h1 id="离散序列的基本运算"><a href="#离散序列的基本运算" class="headerlink" title="离散序列的基本运算"></a>离散序列的基本运算</h1><h2 id="尺度变换，内插"><a href="#尺度变换，内插" class="headerlink" title="尺度变换，内插"></a>尺度变换，内插</h2><p><img src="/img/post_illust_img/postBioE/sig01/image-2.png" alt="alt text"></p><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p><img src="/img/post_illust_img/postBioE/sig01/image-3.png" alt="alt text"></p><h1 id="信号的时域分析"><a href="#信号的时域分析" class="headerlink" title="信号的时域分析"></a>信号的时域分析</h1><h2 id="信号预处理"><a href="#信号预处理" class="headerlink" title="信号预处理"></a>信号预处理</h2><ol><li>数据物理量单位的转换：得到的信号由量化的数字量转换成所测量的物理量</li><li>消除趋势项：将由于基线偏离(也称为零漂成份)所造成波形畸变加以修正。基线偏离造成的原因有多种，如测量设备和传感器环境温度、元器件的稳定性等影响。</li></ol><p>趋势项：偏离基线随时间变化的整个过程被称为信号的趋势项。<br>趋势项的消除方法常采用多项式最小二乘法，然后将趋势项从原始信号中减去，实际信号处理中一般取m&#x3D;1-3,m为多项式的阶数。<br><img src="/img/post_illust_img/postBioE/sig01/image-4.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig01/image-5.png" alt="alt text"></p><p>零漂：是指在没有输入信号时，测量系统的输出会缓慢变化偏离零值，即基线偏离。它可能是由于设备老化、温度变化或其他环境因素引起的。<br>消除零漂的方法包括：</p><ul><li>使用硬件滤波器：如高通滤波器（比如 0.5 Hz 截止频率来滤除低频零漂），差分放大器等。</li><li>软件算法：如线性回归或移动平均，可以在数据处理阶段去除趋势项。</li></ul><p>温漂：是指由于温度变化导致测量结果发生漂移的现象。它可能是零漂的一个具体诱因，也可能引起其他类型的漂移（如灵敏度变化）。<br>消除温漂的方法包括：</p><ul><li>温度补偿传感器：在测量系统中加入温度传感器，根据温度变化调整测量结果。</li></ul><ol start="3"><li>高频噪声和干扰的消除：用平滑处理来消除混杂于信号中高频噪声或干扰。</li></ol><p>噪声信号除了有50 Hz的供电电源工作频率及其倍频程等周期性干扰信号外，还有不规则的随机干扰信号，且其频带较宽，有时高频成分所占比例还很大，使得采集到的离散数据绘成的振动曲线上呈现许多毛刺，很不光滑。为了削弱干扰信号的影响，提高信号曲线的光滑度，常常需要对采样数据进行光滑处理。</p><p>对数据平滑处理的方法有加权平均法和五点三次平滑法<br><img src="/img/post_illust_img/postBioE/sig01/image-6.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig01/image-7.png" alt="alt text"><br>为什么平滑处理比直接滤波更好？<br>平滑处理比直接滤波更好，主要是因为以下几点：<br>平滑处理适用于快速、简便地去除轻度高频噪声或干扰，尤其在对信号的频谱结构不清楚、数据点较少、对实时性有要求的场景下，是优于直接滤波的选择。</p><h2 id="时域统计分析"><a href="#时域统计分析" class="headerlink" title="时域统计分析"></a>时域统计分析</h2><ol><li>均值：信号的平均值，反映信号的中心位置，也是信号的直流分量，也是<strong>零漂</strong>的一个重要指标。<br><img src="/img/post_illust_img/postBioE/sig01/image-9.png" alt="alt text"></li><li>均方值：平方和的平均值，反映信号的<strong>能量</strong>，是信号功率的一个重要指标<br><img src="/img/post_illust_img/postBioE/sig01/image-8.png" alt="alt text"></li></ol><ul><li>信号的均方根值Xrms，也叫信号的有效值，表示信号的<strong>强度和功率</strong>，平均功率与均方根的平方成正比。</li></ul><ol start="3"><li>方差：信号的方差，反映信号<strong>波动的大小</strong>，方差越大，信号的波动越剧烈，信号纯动态强度的一个重要指标。<br><img src="/img/post_illust_img/postBioE/sig01/image-10.png" alt="alt text"><br>三者的关系为：</li></ol><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>方差</mtext><mo>=</mo><mtext>均方值</mtext><mo>−</mo><msup><mtext>均值</mtext><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\text{方差} = \text{均方值} - \text{均值}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">方差</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord cjk_fallback">均方值</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8873em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">均值</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8873em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/img/post_illust_img/postBioE/sig01/image-11.png" alt="alt text"></h2><p>下面的简略看一下</p><ol start="4"><li>概率分布函数：<br><img src="/img/post_illust_img/postBioE/sig01/image-12.png" alt="alt text"></li><li>概率密度函数：<br><img src="/img/post_illust_img/postBioE/sig01/image-13.png" alt="alt text"></li></ol><h2 id="信号的时域分解"><a href="#信号的时域分解" class="headerlink" title="信号的时域分解"></a>信号的时域分解</h2><h3 id="连续信号的时域分解"><a href="#连续信号的时域分解" class="headerlink" title="连续信号的时域分解"></a>连续信号的时域分解</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>τ</mi></mrow><annotation encoding="application/x-tex">f(t) = \int_{-\infty}^{+\infty} f(\tau)\delta(t - \tau) \, d\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4915em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></span><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>任何信号 </mtext><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mtext> 都可以表示为自身与冲激函数 </mtext><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> 的卷积。</mtext></mrow><annotation encoding="application/x-tex">\text{任何信号 } f(t) \text{ 都可以表示为自身与冲激函数 } \delta(t - \tau) \text{ 的卷积。}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord cjk_fallback">任何信号</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">都可以表示为自身与冲激函数</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">的卷积。</span></span></span></span></span></span><h3 id="离散信号的时域分解"><a href="#离散信号的时域分解" class="headerlink" title="离散信号的时域分解"></a>离散信号的时域分解</h3><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munderover><mi>f</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[k] = \sum_{n=-\infty}^{+\infty} f[n] \delta[k - n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0667em;vertical-align:-1.3083em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7583em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span></span><p>展开为</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mo>⋯</mo><mo>+</mo><mi>f</mi><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>f</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>f</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>f</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mi>n</mi><mo stretchy="false">]</mo><mo>+</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">f[k] = \cdots + f[-1]\delta[k+1] + f[0]\delta[k] + f[1]\delta[k-1] + \cdots + f[n]\delta[k-n] + \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.313em;"></span><span class="minner">⋯</span></span></span></span></span><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>任意序列可以分解为单位脉冲序列 </mtext><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mtext> 及其位移 </mtext><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><msub><mi>n</mi><mn>0</mn></msub><mo stretchy="false">]</mo><mtext> 的加权和。</mtext></mrow><annotation encoding="application/x-tex">\text{任意序列可以分解为单位脉冲序列 } \delta[k] \text{ 及其位移 } \delta[k - n_0] \text{ 的加权和。}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord cjk_fallback">任意序列可以分解为单位脉冲序列</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">及其位移</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">的加权和。</span></span></span></span></span></span><h1 id="线性时不变LTI系统"><a href="#线性时不变LTI系统" class="headerlink" title="线性时不变LTI系统"></a>线性时不变LTI系统</h1><p><img src="/img/post_illust_img/postBioE/sig01/image-15.png" alt="alt text"><br>y是系统的输出，f是输入信号<br>LTI除了有线性和时不变特性，T为系统T，表示将输入送入系统T{}，还有<br><img src="/img/post_illust_img/postBioE/sig01/image-16.png" alt="alt text"></p><h1 id="连续时间LTI的响应"><a href="#连续时间LTI的响应" class="headerlink" title="连续时间LTI的响应"></a>连续时间LTI的响应</h1><p>零状态响应：系统初始为零，仅由输入f(t) 造成的响应；<br>时不变性：输入延迟 → 输出也延迟（系统“对时间不敏感”）；<br>均匀性：输入缩放 → 输出同样缩放（线性系统的基本特性）；<br><img src="/img/post_illust_img/postBioE/sig01/image-17.png" alt="alt text"><br>h是指系统的单位脉冲响应，表示系统对单位脉冲输入δ(t) 的响应。</p><h2 id="卷积法推导-LTI-系统零状态响应"><a href="#卷积法推导-LTI-系统零状态响应" class="headerlink" title="卷积法推导 LTI 系统零状态响应 "></a>卷积法推导 LTI 系统零状态响应 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></h2><p>忘了公式怎么来的就推一遍<br>任意信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 可以分解为冲激函数的线性组合：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>τ</mi></mrow><annotation encoding="application/x-tex">f(t) = \int_{-\infty}^{+\infty} f(\tau)\, \delta(t - \tau)\, d\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4915em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></span><p>该信号输入 LTI 系统，利用线性性与时不变性，有：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mi>δ</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T\{f(\tau)\delta(t - \tau)\} = f(\tau)\, h(t - \tau)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span></span></span></span></span><p>因此，系统对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 的响应（零状态响应）为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>y</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>τ</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_f(t) = \int_{-\infty}^{+\infty} f(\tau)\, h(t - \tau)\, d\tau = f(t) * h(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4915em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span><ul><li>做个例题<br><img src="/img/post_illust_img/postBioE/sig01/image-18.png" alt="alt text"></li></ul><h2 id="卷积性质"><a href="#卷积性质" class="headerlink" title="卷积性质"></a>卷积性质</h2><p>基本规律略过，注意一下展缩性质即可<br><img src="/img/post_illust_img/postBioE/sig01/image-20.png" alt="alt text"><br>下面这些都是奇异信号的卷积性质<br>注意区分延迟特性和狄拉克函数的采样性质，这里是卷积，要先翻转再平移<br>下面这些性质自己根据卷积定义写一下都很容易出来，特别注意一下等效特性<br><img src="/img/post_illust_img/postBioE/sig01/image-19.png" alt="alt text"></p><h1 id="离散时间LTI的响应"><a href="#离散时间LTI的响应" class="headerlink" title="离散时间LTI的响应"></a>离散时间LTI的响应</h1><p><img src="/img/post_illust_img/postBioE/sig01/image-21.png" alt="alt text"></p><h2 id="离散时间-LTI-系统的响应求解"><a href="#离散时间-LTI-系统的响应求解" class="headerlink" title="离散时间 LTI 系统的响应求解"></a>离散时间 LTI 系统的响应求解</h2><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><p><img src="/img/post_illust_img/postBioE/sig01/image-22.png" alt="alt text"><br>就是连续数列推导</p><h3 id="卷积法"><a href="#卷积法" class="headerlink" title="卷积法"></a>卷积法</h3><p>和连续的差不多，都是输入信号和单位脉冲响应的卷积<br>例题，最后不要算错等比数列<br><img src="/img/post_illust_img/postBioE/sig01/image-23.png" alt="alt text"></p><h2 id="卷积和的计算"><a href="#卷积和的计算" class="headerlink" title="卷积和的计算"></a>卷积和的计算</h2><p><img src="/img/post_illust_img/postBioE/sig01/image-24.png" alt="alt text"><br>如例题，翻转平移后，重合部分一一对应相乘相加</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p><img src="/img/post_illust_img/postBioE/sig01/image-25.png" alt="alt text"><br>性质和卷积差不多，注意一下等效特性，注意位移特性</p><h1 id="单位冲激响应"><a href="#单位冲激响应" class="headerlink" title="单位冲激响应"></a>单位冲激响应</h1><h2 id="级联系统"><a href="#级联系统" class="headerlink" title="级联系统"></a>级联系统</h2><p>子系统的输出可以作为下一个子系统的输入，形成级联关系。<br>子系统的单位冲激响应可以通过卷积得到整个级联系统的单位冲激响应。<br>离散时间系统也一样的<br><img src="/img/post_illust_img/postBioE/sig01/image-26.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig01/image-27.png" alt="alt text"></p><h2 id="并联系统"><a href="#并联系统" class="headerlink" title="并联系统"></a>并联系统</h2><p>并联系统的输出是各个子系统输出的和。<br>并联系统的单位冲激响应是各个子系统单位冲激响应的和。<br><img src="/img/post_illust_img/postBioE/sig01/image-28.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig01/image-29.png" alt="alt text"><br>例题<br><img src="/img/post_illust_img/postBioE/sig01/image-30.png" alt="alt text"><br>答案</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>δ</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>∗</mo><msub><mi>h</mi><mn>3</mn></msub><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo><mo>∗</mo><msub><mi>h</mi><mn>4</mn></msub><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">h[k] = \bigl( \delta[k] + h_1[k] + h_2[k] * h_3[k] \bigr) * h_4[k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mopen"><span class="delimsizing size1">(</span></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mclose"><span class="delimsizing size1">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span></span><p>中间一路直接当成单位冲激响应<br>因为系统的单位冲激响应是指系统在输入为δ[k] 时的输出。而对于“直通路径”，输入什么就输出什么，所以它的冲激响应就是 δ[k] 本身。</p><h2 id="因果系统"><a href="#因果系统" class="headerlink" title="因果系统"></a>因果系统</h2><p>因果系统是指系统t0时刻的输出只和t0时刻及以前的输入信号有关。<br><img src="/img/post_illust_img/postBioE/sig01/image-31.png" alt="alt text"></p><hr><h3 id="推导因果性对应的冲激响应条件"><a href="#推导因果性对应的冲激响应条件" class="headerlink" title="推导因果性对应的冲激响应条件"></a>推导因果性对应的冲激响应条件</h3><p>为满足因果性，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 不应依赖未来的输入，即积分中不应有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi><mo>&gt;</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">\tau &gt; t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> 的贡献。</p><p>若系统满足因果性，必须有：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>τ</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace width="1em"/><mtext>当 </mtext><mi>τ</mi><mo>&gt;</mo><mi>t</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> for </mtext><mi>t</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h(t - \tau) = 0 \quad \text{当 } \tau &gt; t \quad \Rightarrow \quad h(t) = 0,\ \text{for } t &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord cjk_fallback">当</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">for </span></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span><hr><h3 id="结论（因果性的充要条件）"><a href="#结论（因果性的充要条件）" class="headerlink" title="结论（因果性的充要条件）"></a>结论（因果性的充要条件）</h3><ul><li>连续时间系统因果性的冲激响应条件为：</li></ul><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mspace width="1em"/><mi>t</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h(t) = 0,\quad t &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span><ul><li>离散时间系统因果性的冲激响应条件为：</li></ul><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mspace width="1em"/><mi>k</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h[k] = 0,\quad k &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span><h2 id="稳定系统"><a href="#稳定系统" class="headerlink" title="稳定系统"></a>稳定系统</h2><p><img src="/img/post_illust_img/postBioE/sig01/image-32.png" alt="alt text"></p><h1 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h1><p><img src="/img/post_illust_img/postBioE/sig01/image-33.png" alt="alt text"><br><img src="/img/post_illust_img/postBioE/sig01/403214e38d9f23ca9d878ab983e773e.jpg" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>生物医学电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译，链接，构建以及CMake，make等都是什么？</title>
    <link href="/2025/05/12/%E7%BC%96%E8%AF%91%EF%BC%8C%E9%93%BE%E6%8E%A5%EF%BC%8C%E6%9E%84%E5%BB%BA%E4%BB%A5%E5%8F%8ACMake%EF%BC%8Cmake%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2025/05/12/%E7%BC%96%E8%AF%91%EF%BC%8C%E9%93%BE%E6%8E%A5%EF%BC%8C%E6%9E%84%E5%BB%BA%E4%BB%A5%E5%8F%8ACMake%EF%BC%8Cmake%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>讲个笑话，我曾经见到一个信类大二的科班朋友，在用cmake编译py脚本</p><hr><p>在尝试怎么用sw直接导出urdf的时候，找到了ROS官方的小插件，clone到本地后一看，只有一个叫install的<code>.iss</code>文件，看ROS wiki也只是随便写了一句</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-comment">&quot;Run the installer. It will ask for permission to make changes to your computer. Your Windows account will need to have sufficient privileges to make these changes. It should install into the SolidWorks directory in program files.&quot;</span><br></code></pre></td></tr></table></figure><p>查了下<code>.iss</code>格式应该是要拿Inno Setup来编译的，结果装好之后也不行，问了GPT才知道原来这还得要拿VS来构建，原来里面有个<code>.sln</code>格式的VS文件，到这里发现已经凌晨四点，整理了一下工作流和GPT确认了一下就睡觉了zzz，留着到今天进行一个整理</p><h1 id="上面这个案例的工作流"><a href="#上面这个案例的工作流" class="headerlink" title="上面这个案例的工作流"></a>上面这个案例的工作流</h1><p>由于原项目是在VS里写的，在创建VS项目时就生成了<code>.sln</code>文件，也就是<code>Solution File</code>，他是整个VS项目的代码入口，保存了编译配置，工程依赖关系，打开<code>.sln</code>文件，选择构建配置(比如Debug&#x2F;Release，在构建系统很常见的两个名字)，构建完成后使用Inno Setup编译<code>.iss</code>脚本生成安装程序的<code>.exe</code>，最后直接启动<code>.exe</code>就完成了安装</p><h1 id="编译，链接，构建都是什么"><a href="#编译，链接，构建都是什么" class="headerlink" title="编译，链接，构建都是什么"></a>编译，链接，构建都是什么</h1><table><thead><tr><th>概念</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td><strong>编译 compile</strong></td><td>把单个源文件（如 <code>.cpp</code>）转换为目标文件（<code>.obj</code> 或 <code>.o</code>）</td><td><code>g++ -c foo.cpp -o foo.o</code></td></tr><tr><td><strong>链接 link</strong></td><td>把多个 <code>.o</code> 合并为可执行文件或 <code>.dll</code></td><td><code>g++ foo.o bar.o -o app.exe</code></td></tr><tr><td><strong>构建 build</strong></td><td>包括“编译 + 链接 + 拷贝资源 + 生成中间产物”等整个过程</td><td><code>make</code>, <code>cmake --build</code>, <code>msbuild</code></td></tr></tbody></table><p><strong>构建是是一个“项目级别”的行为，而编译是“文件级别”的行为</strong></p><h1 id="各类构建、编译工具"><a href="#各类构建、编译工具" class="headerlink" title="各类构建、编译工具"></a>各类构建、编译工具</h1><p>下面我会逐步介绍不同形式的工作流</p><h2 id="DEV-C-，CODE-BLOCKS-VS等IDE"><a href="#DEV-C-，CODE-BLOCKS-VS等IDE" class="headerlink" title="DEV-C++，CODE BLOCKS,VS等IDE"></a>DEV-C++，CODE BLOCKS,VS等IDE</h2><p>如果你写好代码，直接在这些IDE里面点击run，实际上背后的过程包括了四步</p><ol><li><p>预处理（Preprocessing）<br>它会处理 #include、#define 等预处理指令。<br>输出是一个展开后的源文件（临时中间文件）。</p></li><li><p>编译（Compiling）<br>使用 GCC（g++） 将每个 .cpp 文件编译成 .o（object）文件，也叫目标文件。<br>每个 .o 文件对应一个编译单元。</p></li><li><p>链接（Linking）<br>把所有生成的 .o 文件以及你项目中依赖的链接库（如标准库、用户添加的第三方库）合并成一个可执行文件 .exe。<br>链接器负责解析函数&#x2F;变量引用，完成最终的程序结构。</p></li><li><p>运行（Running）<br>执行最终生成的 .exe 文件。</p></li></ol><h3 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h3><ul><li>gcc用于编译C，也可以编译C++，但你要手动加上 -lstdc++ 才能链接标准 C++ 库</li><li>g++专用于编译C++，自动链接C++库</li><li>在windows下gcc&#x2F;g++叫做mingw，所以如果你想在vscode上run C&#x2F;C++，可以指定DEV-C++或者CODE BLOCKS的Mingw (乐)</li><li><code>.o/.obj</code>文件是机器语言，<code>.s</code>才是汇编语言</li></ul><h2 id="VS的-sln-vsxporj，以及Inno-Setup"><a href="#VS的-sln-vsxporj，以及Inno-Setup" class="headerlink" title="VS的.sln .vsxporj，以及Inno Setup"></a>VS的<code>.sln</code> <code>.vsxporj</code>，以及Inno Setup</h2><h3 id="VS工程"><a href="#VS工程" class="headerlink" title="VS工程"></a>VS工程</h3><p><code>.sln</code>是创建项目时生成的Solution File，是VS工程的主入口，是组织多个项目的容器，使用特殊格式<br><code>.vsxproj</code>存储了构建的配置，使用xml格式，包括了要构建的源代码，头文件都是什么，要使用的编译器，生成路径，输出类型(EXE,DLL),选择默认构建配置(Debug&#x2F;Release)等等，在VS里似乎(?)有GUI可以直接配置(我用的少)</p><p>之后直接在VS里run就可以完成项目级构建了</p><h3 id="Inno-Set"><a href="#Inno-Set" class="headerlink" title="Inno Set"></a>Inno Set</h3><p><strong>为什么需要Inno Set?</strong><br>既然VS已经可以编译出EXE和DLL了，为什么还需要Inno Setup来编译，实际上对于需要安装的软件和插件，你编译出的可执行程序只是程序本身，无法完成安装所需的功能，比如:</p><table><thead><tr><th>安装行为</th><th>你写的 <code>.exe</code> 做不到</th><th>Inno Setup 等安装工具能做</th></tr></thead><tbody><tr><td>创建快捷方式</td><td>❌</td><td>✅</td></tr><tr><td>复制 DLL 到系统目录</td><td>❌</td><td>✅</td></tr><tr><td>写入注册表（如插件注册）</td><td>❌</td><td>✅</td></tr><tr><td>自动卸载入口</td><td>❌</td><td>✅</td></tr></tbody></table><hr><p>使用Inno Setup来完成安装程序的封装，最后就是随处可见的Setup.exe了<br>对于sw2urdf这个插件来说，要由Inno Setup完成封装，并把其写入注册表，solidworks才能在注册表找到sw2urdf这个插件</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>DLL是动态链接库，由编译器编译得到，类似于项目里的utils或者ROS的功能包，可以被其他EXE&#x2F;DLL调用，在linux系统下是<code>.so</code>后缀</li><li>有动态链接就有静态链接，在win系统下是<code>.lib</code>后缀，在linux系统下是<code>.a</code>后缀</li></ul><table><thead><tr><th>方式</th><th>示例</th><th>特点</th></tr></thead><tbody><tr><td>静态链接</td><td><code>.lib</code> &#x2F; <code>.a</code></td><td>编译时将库嵌入可执行文件，体积大，更新麻烦</td></tr><tr><td>动态链接</td><td><code>.dll</code> &#x2F; <code>.so</code></td><td>运行时加载，灵活节省空间，需分发 DLL</td></tr></tbody></table><table><thead><tr><th>平台</th><th>静态库</th><th>动态库</th><th>用途说明</th></tr></thead><tbody><tr><td>Windows</td><td><code>.lib</code></td><td><code>.dll</code>（+ <code>.lib</code>）</td><td><code>.lib</code> 静态 or 动态的导入库；<code>.dll</code> 是运行时用</td></tr><tr><td>Linux</td><td><code>.a</code></td><td><code>.so</code></td><td><code>.a</code> 编译时链接；<code>.so</code> 编译 + 运行时用</td></tr><tr><td>macOS</td><td><code>.a</code></td><td><code>.dylib</code></td><td>同上</td></tr></tbody></table><h2 id="ROS的catkin-build"><a href="#ROS的catkin-build" class="headerlink" title="ROS的catkin build"></a>ROS的catkin build</h2><p>ROS1有两种构建方式，<code>catkin make</code>和<code>catkin build</code>，通常来说使用<code>catkin build</code>就可以，他更适用于大型项目的构建，并且可以多个功能包并行构建，<code>catkin make</code>是最早的官方工具，但后续社区自己长出来了<code>catkin build</code>，功能更加强大，所以咱也不知道为什么<code>catkin make</code>还没被弃用(虽然ROS2里只有colcon build了)<br><code>catkin build</code>包含了编译、链接、构建的全过程<br>ROS 的 <code>catkin build</code> 实际调用的是：</p><ul><li>CMake（处理构建配置）</li><li>Make &#x2F; Ninja（实际执行编译和链接）</li><li>rosbuild &#x2F; ament &#x2F; colcon（管理依赖、生成 install 目录）</li></ul><p>但你不需要看到它们，因为 catkin build 把这些流程封装统一了，你只看到一行命令：<br><code>catkin build</code><br>它背后等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><h2 id="make，cmake以及他们对应的文件"><a href="#make，cmake以及他们对应的文件" class="headerlink" title="make，cmake以及他们对应的文件"></a>make，cmake以及他们对应的文件</h2><p>前面提到，<code>catkin</code>在构建时调用了cmake, make&#x2F;ninja，现在来介绍这些工具</p><h3 id="总体工作流"><a href="#总体工作流" class="headerlink" title="总体工作流"></a>总体工作流</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">你写的代码（.cpp/.h） + 配置文件（CMakeLists.txt）<br>           ↓<br>     cmake（生成构建脚本）<br>           ↓<br>   Makefile / build.ninja（构建脚本）<br>           ↓<br>   make / ninja（实际执行构建）<br>           ↓<br>   编译器（gcc/clang）执行 → .o → .exe/.so<br></code></pre></td></tr></table></figure><h3 id="工具-文件类型对照表"><a href="#工具-文件类型对照表" class="headerlink" title="工具 &amp; 文件类型对照表"></a>工具 &amp; 文件类型对照表</h3><table><thead><tr><th>名称</th><th>类型</th><th>你是否编写</th><th>主要功能</th><th>产出&#x2F;输入文件</th></tr></thead><tbody><tr><td><code>CMakeLists.txt</code></td><td>配置脚本</td><td>✅ 你写</td><td>定义项目结构和构建规则（目标、依赖、选项）</td><td>输入给 <code>cmake</code></td></tr><tr><td><code>cmake</code></td><td>工具（构建脚本生成器）</td><td>❌ 系统提供</td><td>解析 <code>CMakeLists.txt</code> 并生成 <code>Makefile</code> 或 <code>build.ninja</code></td><td>输出构建脚本</td></tr><tr><td><code>Makefile</code></td><td>构建脚本</td><td>❌（或半自动）</td><td><code>make</code> 读取它来知道如何编译项目</td><td>输入给 <code>make</code></td></tr><tr><td><code>make</code></td><td>构建执行器</td><td>❌ 系统提供</td><td>根据 Makefile 调用编译器构建项目</td><td>输出 <code>.o</code>, <code>.exe</code>, <code>.so</code> 等</td></tr><tr><td><code>ninja</code></td><td>现代构建执行器（比 make 快）</td><td>❌ 系统提供</td><td>根据 <code>build.ninja</code> 执行构建步骤</td><td>输出 <code>.o</code>, <code>.exe</code>, <code>.so</code> 等</td></tr><tr><td><code>build.ninja</code></td><td>构建脚本（ninja 用）</td><td>❌（由 <code>cmake -G Ninja</code> 生成）</td><td>替代 Makefile，更适合并行</td><td>输入给 <code>ninja</code></td></tr></tbody></table><h3 id="工具间的关系"><a href="#工具间的关系" class="headerlink" title="工具间的关系"></a>工具间的关系</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">你写的：CMakeLists<span class="hljs-selector-class">.txt</span><br>           ↓（执行 cmake）<br>生成：<br>→ Makefile       → 用于 make<br>→ build<span class="hljs-selector-class">.ninja</span>    → 用于 ninja<br><br>然后运行：<br>→ make           → 编译为 <span class="hljs-selector-class">.o</span> → <span class="hljs-selector-class">.exe</span><br>→ ninja          → 同上，但更快<br><br></code></pre></td></tr></table></figure><hr><p>回到那个开头的笑话，为什么用cmake去编译py脚本非常搞笑，因为Python是解释性语言而非编译型语言，使用的是解释器而非编译器，直接run就行，不需要像C&#x2F;C++一样先编译再执行，这同时也反映了Python脚本的一大优点——修改后立即生效<br>(我靠，写了一个多小时，作业也没做)</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十四章-细胞分化</title>
    <link href="/2025/05/11/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0-%E7%BB%86%E8%83%9E%E5%88%86%E5%8C%96/"/>
    <url>/2025/05/11/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0-%E7%BB%86%E8%83%9E%E5%88%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="第十四章-细胞分化"><a href="#第十四章-细胞分化" class="headerlink" title="第十四章 细胞分化"></a>第十四章 细胞分化</h1><h2 id="细胞分化"><a href="#细胞分化" class="headerlink" title="细胞分化"></a>细胞分化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>名词解释</strong><br>细胞分化，细胞在形态、结构、功能上发生稳定性差异的过程</p><ol><li>细胞分化是基因选择性表达的结果<br>分子杂交<br>southern杂交(DNA)，northern杂交(RNA，主要是mRNA)</li><li>管家基因和组织特异性基因(奢侈基因)<br>管家基因在所有细胞都表达，产物是维持细胞生命活动所必须的<br>组织特异性基因(奢侈基因)，在不同类型组织中特异性表达的，产物可赋予细胞特异的形态、结构和功能</li><li>分化的组合调控<br>由少量基因调控蛋白决定分化方向，(比如MyoD，在体外使成纤维细胞向骨骼肌细胞分化，比如ey基因，在体内异位表达，果蝇会在腿上长出眼器官)n种调控蛋白可以产生2^n种分化结果<br><img src="/img/post_illust_img/post2/molecular_hybrid.png" alt="分子杂交"></li><li>转分化，去分化，重编程，再生</li></ol><hr><table><thead><tr><th>名词</th><th>转分化</th><th>去分化</th><th>重编程</th></tr></thead><tbody><tr><td>概念</td><td>由一种分化转变为另一种</td><td>又叫脱分化，分化后的细胞失去其特有的结构和功能，转变为未分化的状态</td><td>高等动物克隆时细胞核转入卵细胞进行去分化的过程，涉及DNA,组蛋白修饰的变化</td></tr></tbody></table><hr><p>再生，再生能力比较，低等动物&gt;高等动物，植物&gt;动物</p><h3 id="影响细胞分化的因素"><a href="#影响细胞分化的因素" class="headerlink" title="影响细胞分化的因素"></a>影响细胞分化的因素</h3><p><strong>直接因素</strong><br>直接因素是调控蛋白的组合，主要受胞外信号系统影响，而胞外信号受细胞信号转导调控网络控制</p><ol><li>受精卵细胞质的不均一性<br>果蝇卵受精后，只进行核分裂，核移动到对应位置就分化为对应细胞，如进入生殖质的区域就会分化为生殖细胞，生殖质就是其分化为生殖细胞的<strong>决定子</strong><br>果蝇胚胎的发育命运在卵子成熟时就已经决定，受精后激活或抑制区域化的合子基因表达，决定了发育方向</li><li>细胞的位置信息和信号分子<br>近端诱导(近端组织相互作用，胚胎诱导)，一些细胞可以影响周围的细胞分化方向<br>通过<strong>信号细胞分泌信号分子</strong>来完成(信号分子也可以作用到靶细胞)</li></ol><ul><li>短程诱导作用：相距5-10个细胞</li><li>长程诱导细胞：超过5-10细胞<br>例子：眼原基的逐级诱导</li></ul><ol start="3"><li>细胞记忆与<strong>决定</strong><br>细胞将信号分子短暂的作用存储起来形成长期记忆，细胞和其<strong>子代细胞</strong>向特定方向分化<br>成虫盘移植实验</li></ol><ul><li><strong>决定</strong>：细胞接受指令后，将在形态、结构、功能等分化特征发育前就决定分化命运<br><strong>决定早于分化</strong></li><li>细胞的决定与细胞的记忆有关，记忆实现的两种途径</li><li><ol><li>正反馈途径，接受信号分子后，激活转录调节因子，不仅诱导自身基因(转录因子基因，形成了正反馈)表达，还能诱导其他组织特异性基因</li></ol></li><li><ol start="2"><li>染色体结构发生变化(DNA与蛋白质相互作用及修饰)并传递给子代细胞</li></ol></li></ul><ol start="4"><li>(特殊方式)染色质变化与基因重排<br>染色体丢失———马蛔虫特例<br>基因重排: B细胞分化时，体细胞重组</li></ol><h2 id="干细胞"><a href="#干细胞" class="headerlink" title="干细胞"></a>干细胞</h2><h3 id="根据分化潜能分类"><a href="#根据分化潜能分类" class="headerlink" title="根据分化潜能分类"></a>根据分化潜能分类</h3><p>全能干细胞：受精卵，卵裂早期细胞（不超过16个细胞），可以分化为完整生命体<br>多潜能干细胞：囊胚三胚层中的细胞，有<strong>胚胎干细胞，生殖嵴干细胞</strong><br>多能干细胞：仅能分化为几种类型的细胞<br>单能干细胞：仅能向<strong>一种或几种</strong>密切相关的终末细胞类型分化</p><h3 id="根据来源分类"><a href="#根据来源分类" class="headerlink" title="根据来源分类"></a>根据来源分类</h3><p>胚胎干细胞：来自囊胚内细胞团<br>成体干细胞：造血干细胞，神经干细胞，肠干细胞</p><h3 id="增殖方式"><a href="#增殖方式" class="headerlink" title="增殖方式"></a>增殖方式</h3><p>对称性分裂：数目扩增<br>不对称性分裂：除了自我更新，还产生了分化后的细胞</p><p>祖细胞&#x2F;前体细胞：干细胞早期分化后，细胞不再能无限分裂，只能进行有限次分裂</p><h3 id="细胞分化逆转"><a href="#细胞分化逆转" class="headerlink" title="细胞分化逆转"></a>细胞分化逆转</h3><p>爪蟾核移植实验：体细胞核移植<br>多利羊：重编程</p><h3 id="胚胎干细胞"><a href="#胚胎干细胞" class="headerlink" title="胚胎干细胞"></a>胚胎干细胞</h3><p>来源：内细胞团<br>还有胚胎生殖嵴干细胞</p><h3 id="成体干细胞"><a href="#成体干细胞" class="headerlink" title="成体干细胞"></a>成体干细胞</h3><p>功能：产生终末分化细胞<br>分布：广泛存在于各种组织，大脑内也有(神经干细胞)<br>干细胞巢：针对成体干细胞，维持其特性，提供特定胞外信号的微环境</p><h3 id="逆转终末分化细胞"><a href="#逆转终末分化细胞" class="headerlink" title="逆转终末分化细胞"></a>逆转终末分化细胞</h3><p>历程:移植到卵细胞&gt;&gt;移植到胚胎干细胞&gt;&gt;iPS(转入四个基因)</p><h1 id="应试"><a href="#应试" class="headerlink" title="应试"></a>应试</h1><h2 id="课上思考题"><a href="#课上思考题" class="headerlink" title="课上思考题"></a>课上思考题</h2><p>Q:造血干细胞、神经干细胞、肠干细胞从分化潜能来讲，分别属于哪一类型的干细胞？<br>A:</p><table><thead><tr><th>造血干细胞</th><th>神经干细胞</th><th>肠干细胞</th></tr></thead><tbody><tr><td>多能干细胞</td><td>单能干细胞</td><td>单能干细胞</td></tr></tbody></table><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p><img src="/img/post_illust_img/post2/hw1.png" alt="1"><br><img src="/img/post_illust_img/post2/hw2.png" alt="2"></p>]]></content>
    
    
    
    <tags>
      
      <tag>细胞生物学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的类、对象、函数、方法、模块、库的辨析</title>
    <link href="/2025/05/11/Python%E7%9A%84%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%BA%93%E7%9A%84%E8%BE%A8%E6%9E%90/"/>
    <url>/2025/05/11/Python%E7%9A%84%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%A8%A1%E5%9D%97%E3%80%81%E5%BA%93%E7%9A%84%E8%BE%A8%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>问题背景：由于煮波代码基础贼差，而且记性不好，经常会问GPT一些很基础的概念问题，扔在这里方便煮波随时复习，对话的起因是在问ROS里面的<code>rospy.get_param()</code>函数</p><hr><h1 id="函数，方法"><a href="#函数，方法" class="headerlink" title="函数，方法"></a>函数，方法</h1><h2 id="Q："><a href="#Q：" class="headerlink" title="Q："></a>Q：</h2><p>getparam是rospy下的方法还是函数呢，我不太了解python的方法、函数等概念，能为我解释一下吗</p><h2 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h2><p>太好了，这是一个很关键又常让人疑惑的问题！我来从<strong>Python 的角度</strong>一步步讲清楚“函数”、“方法”这些概念，再解释 <code>rospy.get_param()</code> 是哪一种。</p><hr><h2 id="🧠-一、函数（Function）是什么？"><a href="#🧠-一、函数（Function）是什么？" class="headerlink" title="🧠 一、函数（Function）是什么？"></a>🧠 一、函数（Function）是什么？</h2><blockquote><p><strong>函数</strong>是 Python 中可以被单独调用的一段可复用代码。</p></blockquote><p>你可以把它理解为一个“独立的工具”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello,&quot;</span>, name)<br><br>say_hello(<span class="hljs-string">&quot;Andy&quot;</span>)  <span class="hljs-comment"># 调用函数</span><br></code></pre></td></tr></table></figure><p>这里的 <code>say_hello</code> 就是一个函数，它不属于任何“对象”或者“类”。</p><hr><h2 id="🔧-二、方法（Method）又是什么？"><a href="#🔧-二、方法（Method）又是什么？" class="headerlink" title="🔧 二、方法（Method）又是什么？"></a>🔧 二、方法（Method）又是什么？</h2><blockquote><p><strong>方法</strong>就是“类中的函数”，它必须依附于一个“对象”来使用。</p></blockquote><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Woof!&quot;</span>)<br><br>d = Dog()      <span class="hljs-comment"># 创建一个对象</span><br>d.bark()       <span class="hljs-comment"># 这是“方法”的调用，依赖于对象 d</span><br></code></pre></td></tr></table></figure><p>这里的 <code>bark</code> 就是 Dog 这个类的一个 <strong>方法</strong>。</p><hr><h2 id="🧩-那-rospy-get-param-是函数还是方法？"><a href="#🧩-那-rospy-get-param-是函数还是方法？" class="headerlink" title="🧩 那 rospy.get_param() 是函数还是方法？"></a>🧩 那 <code>rospy.get_param()</code> 是函数还是方法？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">rospy.get_param(<span class="hljs-string">&quot;~param_name&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个是<strong>函数（function）</strong>，虽然它写作 <code>rospy.get_param()</code>，但它并<strong>不是某个对象的方法</strong>，而是一个定义在 <code>rospy</code> 模块里的独立函数。</p><h3 id="✅-解释："><a href="#✅-解释：" class="headerlink" title="✅ 解释："></a>✅ 解释：</h3><ul><li><code>rospy</code> 是一个模块（Python 的库）</li><li><code>get_param</code> 是这个模块下定义的一个函数</li><li>所以它的全称是：<strong>rospy 模块里的函数 get_param</strong></li></ul><p>就像你用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">math.sqrt(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>这也是 math 模块下的 sqrt 函数，本质是一样的。</p><hr><h2 id="🔁-小结：函数-vs-方法"><a href="#🔁-小结：函数-vs-方法" class="headerlink" title="🔁 小结：函数 vs 方法"></a>🔁 小结：函数 vs 方法</h2><table><thead><tr><th>比较项</th><th>函数（function）</th><th>方法（method）</th></tr></thead><tbody><tr><td>所在位置</td><td>模块（如 <code>rospy</code>、<code>math</code>）</td><td>类（如 <code>Dog.bark()</code>）</td></tr><tr><td>是否属于对象</td><td>否</td><td>是（必须通过对象或类调用）</td></tr><tr><td>示例</td><td><code>rospy.get_param()</code></td><td><code>list.append()</code>、<code>str.upper()</code></td></tr></tbody></table><hr><h2 id="🧪-再举个例子："><a href="#🧪-再举个例子：" class="headerlink" title="🧪 再举个例子："></a>🧪 再举个例子：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;hello&quot;</span>)         <span class="hljs-comment"># 函数：内置函数 len</span><br><span class="hljs-string">&quot;hello&quot;</span>.upper()      <span class="hljs-comment"># 方法：字符串对象的 upper 方法</span><br></code></pre></td></tr></table></figure><hr><p>如果你之后还想进一步理解<strong>类、对象、模块、库、包之间的区别</strong>，我也可以为你做一个图文对比的解释！需要吗？</p><h1 id="Python-中的“类、对象、模块、库、包”之间的区别"><a href="#Python-中的“类、对象、模块、库、包”之间的区别" class="headerlink" title="Python 中的“类、对象、模块、库、包”之间的区别"></a>Python 中的“类、对象、模块、库、包”之间的区别</h1><p>太好了！理解 Python 中的“类、对象、模块、库、包”之间的区别，会让你写代码时更清晰、心里更有谱。我会用简单、类比清晰的方式来讲解：</p><hr><h2 id="🧱-一张总览表格：快速区分这些概念"><a href="#🧱-一张总览表格：快速区分这些概念" class="headerlink" title="🧱 一张总览表格：快速区分这些概念"></a>🧱 一张总览表格：快速区分这些概念</h2><table><thead><tr><th>概念</th><th>类比</th><th>是什么？</th><th>例子</th></tr></thead><tbody><tr><td><strong>函数</strong></td><td>工具</td><td>可单独调用的一段代码</td><td><code>print()</code>, <code>math.sqrt()</code></td></tr><tr><td><strong>方法</strong></td><td>对象的功能按钮</td><td>类里的函数</td><td><code>&quot;abc&quot;.upper()</code>, <code>list.append()</code></td></tr><tr><td><strong>类（Class）</strong></td><td>模板</td><td>创建对象的蓝图</td><td><code>class Dog: ...</code></td></tr><tr><td><strong>对象（Object）</strong></td><td>实物</td><td>类的具体实例</td><td><code>dog1 = Dog()</code></td></tr><tr><td><strong>模块（Module）</strong></td><td>文件</td><td>含有函数、类的 <code>.py</code> 文件</td><td><code>rospy</code>, <code>math</code></td></tr><tr><td><strong>包（Package）</strong></td><td>文件夹</td><td>带有 <code>__init__.py</code> 的模块集合</td><td><code>rospy</code>, <code>numpy</code></td></tr><tr><td><strong>库（Library）</strong></td><td>工具箱</td><td>一组功能相关模块&#x2F;包的集合</td><td><code>OpenCV</code>, <code>NumPy</code>, <code>pypylon</code></td></tr></tbody></table><hr><h2 id="🔍-二、一个例子贯穿说明"><a href="#🔍-二、一个例子贯穿说明" class="headerlink" title="🔍 二、一个例子贯穿说明"></a>🔍 二、一个例子贯穿说明</h2><p>我们从一个“狗”的概念来举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mymodule.py （这是一个模块）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:  <span class="hljs-comment"># 这是一个类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):  <span class="hljs-comment"># 这是一个方法</span><br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 这是一个方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name, <span class="hljs-string">&quot;says woof!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():  <span class="hljs-comment"># 这是一个函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello from mymodule!&quot;</span>)<br></code></pre></td></tr></table></figure><p>你可以这样使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mymodule  <span class="hljs-comment"># 导入模块（也是一个包的一部分）</span><br><br>mymodule.say_hello()     <span class="hljs-comment"># 调用模块里的函数</span><br><br>dog1 = mymodule.Dog(<span class="hljs-string">&quot;Buddy&quot;</span>)  <span class="hljs-comment"># 创建对象（类的实例）</span><br>dog1.bark()             <span class="hljs-comment"># 调用对象的方法</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧩-模块、包、库之间的关系图解"><a href="#🧩-模块、包、库之间的关系图解" class="headerlink" title="🧩 模块、包、库之间的关系图解"></a>🧩 模块、包、库之间的关系图解</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">MyLibrary/        &lt;-- 库（Library）<br>│<br>├── image/        &lt;-- 包（Package）<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   ├── <span class="hljs-keyword">resize</span>.<span class="hljs-keyword">py</span>     &lt;-- 模块<br>│   └── color.<span class="hljs-keyword">py</span>      &lt;-- 模块<br>│<br>├── utils/<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   └── logging.<span class="hljs-keyword">py</span>    &lt;-- 模块<br>│<br>└── __init__.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><ul><li>每个 <code>.py</code> 文件是一个 <strong>模块</strong></li><li>有 <code>__init__.py</code> 的文件夹是一个 <strong>包</strong></li><li>整体集合就是一个 <strong>库</strong></li></ul><hr><h2 id="🧠-总结口诀："><a href="#🧠-总结口诀：" class="headerlink" title="🧠 总结口诀："></a>🧠 总结口诀：</h2><blockquote><p>✅ “类是蓝图，对象是实物，函数是工具，方法是专属功能，模块是.py文件，包是模块集合，库是你要装的那整个工具箱。”</p></blockquote><hr><h2 id="🎁-彩蛋：如何判断一个东西是函数还是方法？"><a href="#🎁-彩蛋：如何判断一个东西是函数还是方法？" class="headerlink" title="🎁 彩蛋：如何判断一个东西是函数还是方法？"></a>🎁 彩蛋：如何判断一个东西是函数还是方法？</h2><p>你可以在 Python 里运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(rospy.get_param))  <span class="hljs-comment"># &lt;class &#x27;function&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;abc&quot;</span>.upper))      <span class="hljs-comment"># &lt;class &#x27;builtin_function_or_method&#x27;&gt;</span><br></code></pre></td></tr></table></figure><hr><p>如果你希望我出一张思维导图来帮助你整理这些关系，也完全没问题！或者你有某段代码不知道它用的是哪种概念，也可以贴上来我帮你分析。想来点图示吗？<br><img src="/img/post_illust_img/post1/Python_concept.png" alt="Python_Concept"></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何建立这样一个博客站</title>
    <link href="/2025/05/08/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99/"/>
    <url>/2025/05/08/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>也是一时兴起，用了两天时间大概搭建了这么一个简单的博客站，起因是昨天下午在图书馆坐立难安，感觉无所事事，在查一些东西时又翻到了本校学长建的博客站，想到自己以前也收藏了不少学长的站点，还从那下了不少资料，突然觉得自己也想搞一个博客站来记录我的各种笔记，于是就吭哧吭哧开干了</p><h2 id="关于开发的箴言与我的废话"><a href="#关于开发的箴言与我的废话" class="headerlink" title="关于开发的箴言与我的废话"></a>关于开发的箴言与我的废话</h2><p>以前看到过一个很有趣的缩写”STFW”，其实就是”Search the fxxking web”，素质很差，但很真实，开发上的问题要先从搜索开始。</p><p>然后要”RTFM”，其实也很没素质，是”Read the fxxking manual”，你能查到的不只是CSDN那些废料，还有各种 Document, Manual, Guide, Get started等等，比如本次建立的博客站。</p><p>说实话，每一步都像在跑样例，相比我之前调机器人的时候遇到的问题可简单多了，而且这个领域已经有各种各样的成熟方案，光是一个网站浏览量统计，这个Theme的作者就写了六种接口，简直不要太舒服。</p><h2 id="为什么建这么一个站"><a href="#为什么建这么一个站" class="headerlink" title="为什么建这么一个站"></a>为什么建这么一个站</h2><p>太健忘了(把在电脑上的笔记搬上来，万一以后别人问我技术细节，我当场掏出手机就能看)</p><p>而且我现在话贼多，每天水群都可以水两三个小时，建个站来写废话，反正运营不要钱</p><h2 id="怎么建这样一个博客站"><a href="#怎么建这样一个博客站" class="headerlink" title="怎么建这样一个博客站"></a>怎么建这样一个博客站</h2><p>相信眼尖的你已经注意到了，博客站的页脚基本都写了用的是什么框架和主题。确实，我用的是Hexo框架，Fluid主题，下面是官网链接，读手册就行，你肯定也能几天就建好一个博客站的，加油</p><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a>的官网详细写了怎么配环境以及初始化（我也是第一次用Node.js啊）</p><p>但其实官网基本没写怎么部署到Github Pages上，这个是我参考的教程<a href="https://zhuanlan.zhihu.com/p/60578464">感觉…知乎比CSDN好用</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Fluid主题</a>的作者很详尽的写了config里面的参数含义，以及怎么配置</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
